name: PriestyBot Auto-Review

on:
  pull_request:
    types: [review_requested]

env:
  APPROVER_TOKEN: ${{ secrets.APPROVER_TOKEN }}
  # We can remove the reviewdog token from here as we'll pass it directly.

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    if: github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: üí¨ Acknowledging the review request...
        # ... this step is correct ...
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            # Your script here

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y xvfb

      # --- LINTER CONFIGURATION WITH CORRECT TOKEN ---
      - name: üíß Run Linter (flake8) on Changed Files
        id: lint
        uses: reviewdog/action-flake8@v3
        continue-on-error: true
        with:
          github_token: ${{ env.APPROVER_TOKEN }} # <-- THIS IS THE FIX
          filter_mode: "diff_context"
          reporter: github-pr-review
          fail_on_error: true

      - name: üíÖ Run Format Check (black) on Changed Files
        id: format_check
        uses: reviewdog/action-black@v3
        continue-on-error: true
        with:
          github_token: ${{ env.APPROVER_TOKEN }} # <-- THIS IS THE FIX
          filter_mode: "diff_context"
          reporter: github-pr-review
          fail_on_error: true
          black_args: "--check --diff src"
      
      # --- CORRECTED APPLICATION TEST ---
      - name: üß™ Run Tkinter App Test
        id: app_test
        # ... this step is correct ...
        run: |
          # Your script here
          
      # --- ACCURATE FINAL SUMMARY ---
      - name: üìù Post Final Review Summary
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            # THIS SCRIPT WILL NOW WORK CORRECTLY
            # It can find the review posted by 'PriestyBot' and update it.
            const lint_conclusion = '${{ steps.lint.conclusion }}';
            const format_conclusion = '${{ steps.format_check.conclusion }}';
            const test_conclusion = '${{ steps.app_test.conclusion }}';
            const pr_author = context.payload.pull_request.user.login;
            
            let review_body = `Hi @${pr_author}, I've finished my review!\n\nHere's the summary:\n\n`;
            let event = 'APPROVE';
            
            if (lint_conclusion === 'failure' || format_conclusion === 'failure') {
              review_body += '‚ùå **Code Quality & Style:** I found some issues. Please check my in-line comments for details.\n';
              event = 'REQUEST_CHANGES';
            } else {
              review_body += '‚úÖ **Code Quality & Style:** Passed. Great job!\n';
            }
            
            if (test_conclusion === 'success') {
              review_body += '‚úÖ **Application Test:** Passed. The app launched successfully!\n';
            } else {
              review_body += '‚ùå **Application Test:** Failed. The app seems to crash on startup. Check the workflow logs for errors.\n';
              event = 'REQUEST_CHANGES';
            }
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number,
            });

            // Find the review posted by our bot
            const bot_review = reviews.find(r => r.user.login === 'PriestyBot' && r.state !== 'COMMENTED');

            if (bot_review) {
              await github.rest.pulls.updateReview({
                owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, review_id: bot_review.id, body: review_body
              });
            } else {
              if (event === 'APPROVE') {
                review_body += `\nEverything looks good to me. I'm approving this PR. Keep up the great work! üëç`;
              }
              await github.rest.pulls.createReview({
                owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, event: event, body: review_body
              });
            }