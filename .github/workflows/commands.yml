name: PriestyBot Commands

on:
  issue_comment:
    types: [created]

env:
  APPROVER_TOKEN: ${{ secrets.APPROVER_TOKEN }}

permissions:
  contents: write
  pull-requests: write

jobs:
  command-handler:
    if: github.event.issue.pull_request && github.event.comment.user.login == github.event.issue.user.login
    runs-on: ubuntu-latest
    steps:
      # --- Handler for /approve ---
      - name: Handle /approve
        if: |
          startsWith(github.event.comment.body, '/approve') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.comment.body, 'approve'))
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const comment_body = context.payload.comment.body;
            let message = '';
            if (comment_body.startsWith('/approve')) {
              message = comment_body.replace(/^\/approve\s*/, '').trim();
            } else {
              message = comment_body.replace(/@PriestyBot/i, '').replace(/approve/i, '').trim();
            }
            const review_body = message || "Approved as requested. Looks good to me! âœ…";
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: review_body
            });

      # --- Handler for /comment ---
      - name: Handle /comment
        if: startsWith(github.event.comment.body, '/comment')
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const message = context.payload.comment.body.replace('/comment', '').trim();
            if (message) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `A quick note from @${context.payload.sender.login}:\n\n> ${message}`
              });
            } else {
              // CORRECTED: Using string concatenation to build the message safely
              const errorMessage = "It looks like you wanted to leave a comment, but you forgot to write one! ðŸ˜…\n\n" +
                "Please try again. For example:\n" +
                "> /comment I'll review this in an hour.";
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorMessage
              });
              core.setFailed("Command failed: /comment requires a message.");
            }

      # --- Handler for /request-changes ---
      - name: Handle /request-changes
        if: startsWith(github.event.comment.body, '/request-changes')
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const message = context.payload.comment.body.replace('/request-changes', '').trim();
            if (!message) {
              // CORRECTED: Using string concatenation to build the message safely
              const errorMessage = "Whoops! It looks like you tried to use `/request-changes` without giving me a reason. I need to know *what* needs to be changed! ðŸ¤”\n\n" +
                "Please try again and tell me what to write in the review. For example:\n" +
                "> /request-changes Please add documentation for the new functions.";
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorMessage
              });
              core.setFailed("Command failed: /request-changes requires a message.");
              return;
            }
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'REQUEST_CHANGES',
              body: message
            });

      # --- Handler for /help ---
      - name: Handle /help
        if: |
          startsWith(github.event.comment.body, '/help') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.comment.body, 'help'))
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            // CORRECTED: Using string concatenation for safety here as well
            const help_message = "Hello! I'm PriestyBot, your friendly neighborhood code reviewer. Here's what I can do for you:\n\n" +
              "### Automatic Review\n" +
              "When you request a review from me, I'll automatically:\n" +
              "1.  **Run Linters**: I check your code for quality and style issues using `flake8` and `black`.\n" +
              "2.  **Test The App**: I'll try to run your Tkinter app (`src/main.py`) to make sure it doesn't crash.\n" +
              "3.  **Approve or Request Changes**: Based on the results, I'll either approve the PR or leave feedback.\n\n" +
              "### Manual Commands (for PR authors only)\n" +
              "You can also give me direct orders in a comment:\n\n" +
              "-   `@PriestyBot help` or `/help`\n" +
              "    > Shows this help message.\n\n" +
              "-   `@PriestyBot approve [message]` or `/approve [message]`\n" +
              "    > Forcefully approves the PR. You can add an optional message.\n" +
              "    > *Example: `@PriestyBot please approve this, it is urgent`*\n\n" +
              "-   `@PriestyBot format` or `/format`\n" +
              "    > I'll format your code using `black` and commit the changes directly to this PR.\n\n" +
              "-   `/comment <message>`\n" +
              "    > I'll post your message as a general comment on the PR.\n\n" +
              "-   `/request-changes <message>`\n" +
              "    > Requests changes on the PR with your provided reason.";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: help_message
            });

      # --- Steps for the /format command ---
      - name: ðŸ’¬ Acknowledging format request
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.comment.body, 'format'))
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "On it! I'll format the code with `black` and push the changes back to this branch. ðŸŽ¨"
            });

      - name: Get PR branch name
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.comment.body, 'format'))
        id: get_branch
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return pr.data.head.ref;

      - name: Checkout PR branch
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.body, 'format'))
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_branch.outputs.result }}

      - name: Set up Python
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.body, 'format'))
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install and run black
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.body, 'format'))
        run: |
          pip install black
          black src

      - name: Commit and push changes
        if: |
          startsWith(github.event.comment.body, '/format') ||
          (contains(github.event.comment.body, '@PriestyBot') && contains(github.event.body, 'format'))
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(bot): Format code with black"
          commit_user_name: PriestyBot
          commit_user_email: priestybot@users.noreply.github.com
          commit_author: PriestyBot <priestybot@users.noreply.github.com>