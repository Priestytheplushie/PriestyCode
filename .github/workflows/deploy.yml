name: PriestyCode CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
      - 'v*.*.*-beta*'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Select environment for deployment'
        required: true
        type: choice
        default: 'Beta'
        options:
          - 'Beta'
          - 'Production'
      release_tag_to_deploy:
        description: 'Tag of the release to deploy (e.g., v1.0.0, v1.1.0-beta.1)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  pull-requests: write
  deployments: write
  checks: write

jobs:
  ci-checks:
    name: Application Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Dependencies and Xvfb
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y xvfb

      - name: ðŸ§ª Run Tkinter App Test
        id: app_test
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test result: PASSED (exited cleanly before timeout)"
            exit 0
          elif [ $? -eq 124 ]; then
            echo "App test result: PASSED (ran for 10s without crashing)"
            exit 0
          else
            exit_code=$?
            echo "Test command finished with unexpected exit code: $exit_code"
            echo "App test result: FAILED (crashed with an unexpected error)"
            exit 1
          fi

  build-executable:
    name: Build PriestyCode Executable
    runs-on: windows-latest
    needs: ci-checks
    if: success() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')))
    outputs:
      artifact_zip_name: ${{ steps.prepare-package.outputs.zip_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build the .exe using main.spec
        run: pyinstaller main.spec

      - name: Prepare Release Package
        id: prepare-package
        run: |
          New-Item -ItemType Directory -Path "release"
          Copy-Item -Path "dist/PriestyCode.exe" -Destination "release/PriestyCode.exe"

          $zipName = "${{ github.event.repository.name }}-${{ github.sha }}.zip"
          if ("${{ github.ref_type}}" -eq "tag") {
            $zipName = "${{ github.event.repository.name }}-${{ github.ref_name }}.zip"
          }

          Compress-Archive -Path "release/*" -DestinationPath $zipName
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "ZIP_PATH=$zipName" >> $env:GITHUB_ENV
        shell: powershell

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare-package.outputs.zip_name }}
          path: ${{ env.ZIP_PATH }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-executable
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-executable.outputs.artifact_zip_name }}
          path: ./downloaded_artifact/

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          body: |
            ## Download the executable below!

            This release contains the latest features and bug fixes.

            You can find the detailed changes in the auto-generated release notes above or in the full changelog here: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') || contains(github.ref_name, 'test') }}
          files: ./downloaded_artifact/${{ needs.build-executable.outputs.artifact_zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.APPROVER_TOKEN }}
