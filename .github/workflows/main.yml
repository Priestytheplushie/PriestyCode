name: Python CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Pylint
        # This will run pylint and show suggestions, but the step will never fail.
        run: pylint src --exit-zero

  run-test:
    name: Run Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Tkinter dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
      - name: Install app dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run the app with a virtual display
        run: |
          xvfb-run python src/main.py &
          PID=$!
          sleep 10
          if ps -p $PID > /dev/null; then
            echo "App launched successfully."
            kill $PID
            exit 0
          else
            echo "App failed to launch or crashed."
            exit 1
          fi

  deploy:
    name: Deploy to Production
    needs: [linting, run-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: windows-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build the executable
        run: pyinstaller --name PriestyCode --onefile --windowed src/main.py
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          body: "This is an automated release of the latest version."
          files: dist/PriestyCode.exe