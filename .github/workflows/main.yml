# .github/workflows/bot.yml
name: PriestyBot PR Manager

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [review_requested]

permissions:
  pull-requests: write
  contents: write
  checks: write

jobs:
  # JOB 1: Handles all comment-based interactions.
  command-handler:
    name: Handle Comment Commands
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.sender.type != 'Bot'
    runs-on: ubuntu-latest
    steps:
      - name: Get Comment Body
        run: |
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.comment.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Handle In-Depth Review Request
        if: |
          startsWith(env.COMMENT_BODY, '/review-strict') ||
          (contains(env.COMMENT_BODY, '@PriestyBot') && (contains(env.COMMENT_BODY, 'in-depth') || contains(env.COMMENT_BODY, 'in depth') || contains(env.COMMENT_BODY, 'deep dive')))
        run: |
          gh pr edit ${{ github.event.issue.number }} --add-label "bot: in-depth review"
          gh pr comment ${{ github.event.issue.number }} --body "Alright, kicking off the in-depth review for you. I'll start a new check to run the linters and report back there. One moment! üïµÔ∏è‚Äç‚ôÇÔ∏è"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      
      # ... (The rest of the file is the same as the previous version) ...
      - name: Handle /format
        if: startsWith(env.COMMENT_BODY, '/format')
        uses: actions/checkout@v4
        with: { token: "${{ secrets.APPROVER_TOKEN }}", ref: "${{ github.event.issue.pull_request.head.ref }}" }
      - name: Setup Formatters
        if: startsWith(env.COMMENT_BODY, '/format')
        run: pip install black isort
      - name: Run Formatters to Fix Code
        if: startsWith(env.COMMENT_BODY, '/format')
        run: |
          isort .
          black .
      - name: Commit and Push Changes
        if: startsWith(env.COMMENT_BODY, '/format')
        run: |
          git config --global user.name 'PriestyBot'
          git config --global user.email 'priestybot@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "style: auto-format code with black and isort"
            git push
            gh pr comment ${{ github.event.issue.number }} --body "All formatted! I've tidied up the code and pushed the changes for you. ‚ú®"
          else
            gh pr comment ${{ github.event.issue.number }} --body "Nice, the code is already perfectly formatted! No changes needed from me."
          fi
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      - name: Handle /help
        if: |
          startsWith(env.COMMENT_BODY, '/help') ||
          (contains(env.COMMENT_BODY, '@PriestyBot') && contains(env.COMMENT_BODY, 'help'))
        run: |
          BODY=$(cat <<'EOF'
          ### PriestyBot Help

          Hello! I'm PriestyBot, here to help with pull requests. You can command me by starting a new comment with one of the following:

          - **`@PriestyBot help`** or **`/help`**  
            Shows this help message.

          - **`@PriestyBot in-depth look`** (or *in depth*, *deep dive*)  
            Kicks off a strict, advisory code quality check using `black`, `isort`, and `flake8`. This is optional and will not block the PR from merging.

          - **`/format`**  
            If the in-depth review finds formatting issues, I can fix them for you. Use this command and I'll format the code and push the changes.

          - **`/comment <message>`**  
            Posts a general comment on the PR. For example: `/comment This looks great!`

          - **`/approve <message>`**  
            Approves the pull request. The message is optional.

          - **`/request-changes <message>`**  
            Submits a review requesting changes. A message is required.

          ---
          **Standard Review (App Launch Test)**  
          For the main 'does the app launch?' test, please use the **'Reviewers'** section in the GitHub sidebar and select me. This is treated as a formal, required check.
          EOF
          )
          gh pr comment ${{ github.event.issue.number }} --body "$BODY"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      - name: Handle /approve
        if: (startsWith(env.COMMENT_BODY, '/approve') || contains(env.COMMENT_BODY, '@PriestyBot approve')) && !contains(env.COMMENT_BODY, 'help')
        run: |
          RAW_COMMENT="${{ env.COMMENT_BODY }}"
          if [[ "$RAW_COMMENT" == /approve* ]]; then BODY="${RAW_COMMENT#*/approve }"; else BODY="${RAW_COMMENT#*approve }"; fi
          if [[ "$BODY" == "$RAW_COMMENT" ]]; then BODY="Approved! Happy to help move this along. üëç"; fi
          gh pr review ${{ github.event.issue.number }} --approve --body "$BODY"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      - name: Handle /comment
        if: startsWith(env.COMMENT_BODY, '/comment')
        run: |
          BODY="${{ env.COMMENT_BODY }}"
          BODY="${BODY#*/comment }"
          gh pr comment ${{ github.event.issue.number }} --body "$BODY"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      - name: Handle /request-changes
        if: startsWith(env.COMMENT_BODY, '/request-changes')
        run: |
          BODY="${{ env.COMMENT_BODY }}"
          BODY="${BODY#*/request-changes }"
          gh pr review ${{ github.event.issue.number }} --request-changes --body "$BODY"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }

  # JOB 2: The standard "full review" job
  full-review:
    name: Run Standard Review (Launch Test)
    # ... This job is unchanged and correct ...
    if: github.event_name == 'pull_request' && github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: "Acknowledge Request"
        run: >
          gh pr comment ${{ github.event.pull_request.number }} --body "Got the review request! I'm running the standard check now. This includes a quick lint with \`flake8\` and a test to make sure the app launches. I'll report back when I'm done! üßê"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }
      - name: Checkout PR Code
        uses: actions/checkout@v4
      - name: Setup Environment
        run: |
          sudo apt-get update && sudo apt-get install -y python3-tk xvfb
          pip install -r requirements.txt flake8
      - name: Setup Reviewdog
        uses: reviewdog/action-setup@v1
      - name: Run Flake8 and Check for Issues
        id: run_flake8
        continue-on-error: true
        run: |
          flake8 . | tee flake8_output.txt | reviewdog -name="Advisory Linter (Flake8)" -reporter=github-pr-check
          if [ -s flake8_output.txt ]; then
            echo "found_issues=true" >> $GITHUB_OUTPUT
          else
            echo "found_issues=false" >> $GITHUB_OUTPUT
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Run App Launch Test"
        id: app_test
        run: |
          set +e
          timeout 10s xvfb-run python -m src.main > app_output.txt 2>&1
          APP_EXIT_CODE=$?
          set -e
          if [ $APP_EXIT_CODE -eq 124 ]; then echo "app_exit_code=0" >> $GITHUB_OUTPUT; else echo "app_exit_code=$APP_EXIT_CODE" >> $GITHUB_OUTPUT; fi
          if [ $APP_EXIT_CODE -ne 124 ]; then 
            FAILURE_BODY=$(cat <<EOF
          Uh oh, the app launch test failed, so I have to request changes. Here's the output I captured:

          \`\`\`
          $(cat app_output.txt)
          \`\`\`
          EOF
          )
            echo "$FAILURE_BODY" > failure_comment.txt
            echo "failure_comment_file=failure_comment.txt" >> $GITHUB_OUTPUT
          fi
      - name: Post Final Verdict
        if: always()
        run: |
          if [ "${{ steps.app_test.outputs.app_exit_code }}" == "0" ]; then
            if [ "${{ steps.run_flake8.outputs.found_issues }}" == "true" ]; then
              gh pr review ${{ github.event.pull_request.number }} --approve --body "‚úÖ **App Launch Test Passed!** The application launched without a hitch, so I'm giving this my approval. I've also left some \`flake8\` style suggestions as annotations on the 'Files changed' tab for your reference."
            else
              gh pr review ${{ github.event.pull_request.number }} --approve --body "‚úÖ **All Checks Passed!** The application launched successfully and the linter found no issues. Great work!"
            fi
          else
            gh pr review ${{ github.event.pull_request.number }} --request-changes --body-file ${{ steps.app_test.outputs.failure_comment_file }}
          fi
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }