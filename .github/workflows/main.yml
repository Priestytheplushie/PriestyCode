name: PriestyBot PR Manager

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [review_requested]

permissions:
  pull-requests: write
  contents: read
  checks: write

jobs:
  # JOB 1: Handles simple comments.
  command-handler:
    name: Handle Comment Commands
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.sender.type != 'Bot'
    runs-on: ubuntu-latest
    steps:
      - name: Get Comment Body
        run: echo "COMMENT_BODY=${{ github.event.comment.body }}" >> $GITHUB_ENV

      - name: Handle /approve
        if: startsWith(env.COMMENT_BODY, '/approve') || contains(env.COMMENT_BODY, '@PriestyBot approve')
        run: |
          RAW_COMMENT="${{ env.COMMENT_BODY }}"
          if [[ "$RAW_COMMENT" == /approve* ]]; then
            BODY="${RAW_COMMENT#*/approve}"; BODY=$(echo "$BODY" | xargs)
            if [ -z "$BODY" ]; then BODY="Alright, approved as you asked!"; fi
          else
            BODY="You got it! I've approved this pull request. 👍"
          fi
          gh pr review ${{ github.event.issue.number }} --approve --body "$BODY"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }

      - name: Handle /review and /dismiss commands
        if: |
          startsWith(env.COMMENT_BODY, '/review') ||
          startsWith(env.COMMENT_BODY, '/dismiss') ||
          contains(env.COMMENT_BODY, '@PriestyBot review')
        run: |
          gh pr comment ${{ github.event.issue.number }} --body "To kick off a full automated review, please head over to the **Reviewers** panel on the right side of this page and formally request a review from me, **PriestyBot**. That gives me the green light to run all the checks!"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }

  # JOB 2: The full review job.
  full-review:
    name: Run Full Automated Review
    if: github.event_name == 'pull_request' && github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: Acknowledge Review Request
        run: >
          gh pr comment ${{ github.event.pull_request.number }} --body "Thanks for the request! I'm warming up the engines to run the checks. I'll report back with what I find. 🧐"
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }

      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment and Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y python3-tk xvfb
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flake8

      - name: Setup Reviewdog
        uses: reviewdog/action-setup@v1

      - name: Run Linters with Reviewdog
        id: linting
        run: |
          set +o pipefail
          # THE FIX: Use 'github-pr-review' reporter to post a single, clean review comment.
          flake8 . | reviewdog -f=flake8 -name="Flake8 Linter" -reporter=github-pr-review -level=warning
          LINT_EXIT_CODE=${PIPESTATUS[0]}
          set -o pipefail
          # Use GITHUB_OUTPUT to pass variables to other steps
          if [ ${LINT_EXIT_CODE} -ne 0 ]; then echo "linter_issues_found=true" >> $GITHUB_OUTPUT; else echo "linter_issues_found=false" >> $GITHUB_OUTPUT; fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
          
      - name: Run App Test via Test Runner
        # THE FIX: This step needs an ID to reference its outputs later.
        id: app_test
        run: |
          set +e
          timeout 30s xvfb-run python .github/scripts/run_test.py > app_output.txt 2>&1
          APP_EXIT_CODE=$?
          set -e
          echo "app_exit_code=${APP_EXIT_CODE}" >> $GITHUB_OUTPUT
          if [ ${APP_EXIT_CODE} -ne 0 ]; then
            {
              echo "I tried to run the app, but it looks like it hit a snag during startup. This is usually caused by an import error or a bug in the initial code."
              echo ""
              echo "Here's the technical log I captured:"
              echo '```'
              cat app_output.txt
              echo '```'
            } > failure_comment.txt
            # Pass the filename as an output
            echo "failure_comment_file=failure_comment.txt" >> $GITHUB_OUTPUT
          fi

      - name: Post Final Review
        if: always()
        run: |
          # THE FIX: Reference step outputs using the steps context.
          if [ "${{ steps.app_test.outputs.app_exit_code }}" == "0" ]; then
            LINT_MESSAGE=""
            if [ "${{ steps.linting.outputs.linter_issues_found }}" == "true" ]; then
              LINT_MESSAGE="I also ran the linter and left a review with some style suggestions. "
            fi
            MESSAGE="I've finished my review! ${LINT_MESSAGE}The most important thing is that the application test harness started up and shut down cleanly. Looking good! I'm approving this. ✅"
            gh pr review ${{ github.event.pull_request.number }} --approve --body "$MESSAGE"
          else
            gh pr review ${{ github.event.pull_request.number }} --request-changes --body-file ${{ steps.app_test.outputs.failure_comment_file }}
          fi
        env: { GH_TOKEN: "${{ secrets.APPROVER_TOKEN }}", GH_REPO: "${{ github.repository }}" }