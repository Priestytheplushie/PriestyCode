name: PriestyBot Auto-Review & CodeQL

on:
  push:
    branches:
      - main
  pull_request:
    types: [review_requested, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  lint-and-test:
    name: Lint & Test
    if: |
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    outputs:
      flake8_outcome: ${{ steps.flake8.conclusion }}
      black_outcome: ${{ steps.black.conclusion }}
      isort_outcome: ${{ steps.isort.conclusion }}
      bandit_outcome: ${{ steps.bandit.conclusion }}
      mypy_outcome: ${{ steps.mypy.conclusion }}
      app_test_outcome: ${{ steps.app_test.conclusion }} # This will be success/failure of the step
    steps:
      - name: Add 'priestybot-review' Label
        if: github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['priestybot-review']
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Hey @${context.payload.pull_request.user.login}! üëã Thanks for the review request. I'll get started right away.\n\nP.S. I've added the \`priestybot-review\` label. I'll keep re-reviewing any new changes you push. If you want me to stop, just remove the label!`
            });
      - name: üí¨ Acknowledging new changes
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Just noticed you pushed new changes! Taking another look... üßê`
            });

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Set up reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit

      - name: Create linter-reports directory
        run: mkdir -p linter-reports

      - name: üíß Run Linter (flake8)
        id: flake8
        continue-on-error: true
        run: |
          flake8 src > flake8_raw_output.txt || true 
          if [ -s flake8_raw_output.txt ]; then
            cat flake8_raw_output.txt | reviewdog -f=flake8 -reporter=rdjson -filter-mode=nofilter > linter-reports/flake8.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/flake8.rdjson
          fi

      - name: üíÖ Run Format Check (black)
        id: black
        continue-on-error: true
        run: |
          black --check src > black_raw_output.txt 2>&1 || true
          if [ -s black_raw_output.txt ]; then
            cat black_raw_output.txt | reviewdog -f=black -reporter=rdjson -filter-mode=nofilter > linter-reports/black.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/black.rdjson
          fi
      
      - name: sorted? Run Import Sort Check (isort)
        id: isort
        continue-on-error: true
        run: |
          isort --check src > isort_raw_output.txt || true
          if [ -s isort_raw_output.txt ]; then
            cat isort_raw_output.txt | reviewdog -f=isort -reporter=rdjson -filter-mode=nofilter > linter-reports/isort.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/isort.rdjson
          fi
      
      - name: üîí Run Security Check (bandit)
        id: bandit
        continue-on-error: true
        run: |
          bandit -r src -f json > bandit_raw_output.json || true
          if [ -s bandit_raw_output.json ]; then
            # reviewdog -f=json is the correct parser for generic JSON.
            # Make sure to handle potential empty files or JSON parsing errors.
            cat bandit_raw_output.json | reviewdog -f=json -name="bandit" -reporter=rdjson -filter-mode=nofilter > linter-reports/bandit.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/bandit.rdjson
          fi

      - name: üßê Run Type Check (mypy)
        id: mypy
        continue-on-error: true
        run: |
          mypy src > mypy_raw_output.txt || true
          if [ -s mypy_raw_output.txt ]; then
            cat mypy_raw_output.txt | reviewdog -f=mypy -reporter=rdjson -filter-mode=nofilter > linter-reports/mypy.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/mypy.rdjson
          fi

      - name: üß™ Run Tkinter App Test
        id: app_test
        continue-on-error: true # Crucial to set this to true so the final-review job always runs
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          # xvfb-run executes command in a virtual display.
          # timeout 10s runs the command for a max of 10 seconds.
          # If python exits with 0 (cleanly), the 'if' block runs.
          # If it times out (exit code 124) or crashes (other non-zero), the 'else' block runs.
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test result: PASSED (exited cleanly before timeout)"
            exit 0 # Explicitly succeed this step
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test result: FAILED (timed out after 10s, app likely didn't close cleanly or hung)."
              exit 1 # Mark as failure so `app_test_outcome` is 'failure'
            else
              echo "App test result: FAILED (app crashed with exit code $exit_code)."
              exit $exit_code # Mark as failure if it crashed for other reasons
            fi
          fi
      
      - name: Upload Linter Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: linter-reports
          path: linter-reports/*.rdjson
          retention-days: 1

  codeql:
    name: CodeQL Analysis
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    outputs:
      analyze_outcome: ${{ steps.analyze.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        id: analyze
        uses: github/codeql-action/analyze@v3

  final-review:
    name: Post Final Review
    if: always() && needs.lint-and-test.result != 'skipped'
    runs-on: ubuntu-latest
    needs: [lint-and-test, codeql]
    steps:
      - name: Download Linter Reports
        uses: actions/download-artifact@v4
        with:
          name: linter-reports
          path: linter-reports

      - name: üìù Post Final Review Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const inlineComments = []; 
            const summaryDiagnostics = {}; 

            const reportDir = './linter-reports';
            try {
              const files = fs.readdirSync(reportDir);
              for (const file of files) {
                if (file.endsWith('.rdjson')) {
                  const content = fs.readFileSync(path.join(reportDir, file), 'utf8');
                  if (!content) {
                      console.log(`File ${file} is empty, skipping.`);
                      continue;
                  }
                  let report;
                  try {
                      report = JSON.parse(content);
                  } catch (e) {
                      console.error(`Failed to parse JSON from ${file}: ${e.message}`);
                      continue;
                  }
                  
                  const sourceName = report.source?.name || path.basename(file, '.rdjson'); 
                  summaryDiagnostics[sourceName] = summaryDiagnostics[sourceName] || []; 

                  if (!report.diagnostics || report.diagnostics.length === 0) {
                      console.log(`No diagnostics found in ${file}.`);
                      continue;
                  }

                  for (const diag of report.diagnostics) {
                    const location = diag.location || diag.primaryLocation; 
                    const filePath = location?.path;
                    const startLine = location?.range?.start?.line || location?.span?.start?.line; 
                    
                    if (filePath && typeof startLine === 'number') {
                      const fullMessage = `${diag.message} at \`${filePath}:${startLine}\``;
                      
                      // Bandit and Mypy issues or explicit 'error' level always go inline for visibility
                      if (sourceName === 'bandit' || sourceName === 'mypy' || diag.level === 'error') {
                        inlineComments.push({
                          path: filePath,
                          line: startLine,
                          body: `**[${sourceName}]**: ${diag.message}`
                        });
                      } else {
                        // All other diagnostics (Flake8, Black, Isort, non-error Bandit/Mypy) go to summary
                        summaryDiagnostics[sourceName].push(fullMessage);
                      }
                    } else {
                        console.log(`Skipping diagnostic from ${sourceName} due to missing location info: ${JSON.stringify(diag)}`);
                        if (diag.message) { // Still add to summary if there's a message but no precise location
                             summaryDiagnostics[sourceName].push(`[${sourceName}] (General Issue): ${diag.message}`);
                        }
                    }
                  }
                }
              }
            } catch (error) {
              console.log("Could not process linter reports, likely none were generated or directory issues:", error.message);
            }

            const pr_author = context.payload.pull_request.user.login;
            let review_body = `Hi @${pr_author}, I've finished my review!\n\n`;
            let event = 'APPROVE';
            let is_perfect = false; // Tracks if ALL checks are perfectly clean

            const outcomes = {
              flake8: { conclusion: `${{ needs.lint-and-test.outputs.flake8_outcome }}`, isBlocker: false, title: `üé® Linting Issues (\`flake8\`)` },
              black: { conclusion: `${{ needs.lint-and-test.outputs.black_outcome }}`, isBlocker: false, title: `üé® Formatting & Style (\`black\`)` },
              isort: { conclusion: `${{ needs.lint-and-test.outputs.isort_outcome }}`, isBlocker: false, title: `üé® Import Order (\`isort\`)` },
              bandit: { conclusion: `${{ needs.lint-and-test.outputs.bandit_outcome }}`, isBlocker: true, title: `üö® Security Analysis (\`bandit\`)` }, // Bandit is a blocker if its step fails
              mypy: { conclusion: `${{ needs.lint-and-test.outputs.mypy_outcome }}`, isBlocker: true, title: `üö® Type Checking (\`mypy\`)` }, // Mypy is a blocker if its step fails
              app_test: { conclusion: `${{ needs.lint-and-test.outputs.app_test_outcome }}`, isBlocker: true, title: `üö® Application Test` }, // App test is THE blocker
              codeql: { conclusion: `${{ needs.codeql.outputs.analyze_outcome }}`, isBlocker: true, title: `üö® Advanced Security (\`CodeQL\`)` }
            };

            const appTestFailed = outcomes.app_test.conclusion === 'failure';
            const hasAnyLinterIssues = inlineComments.length > 0 || Object.values(summaryDiagnostics).some(arr => arr.length > 0);
            const hasCodeQLFailures = outcomes.codeql.conclusion === 'failure';


            // --- Determine Review Event and Body Content ---

            if (appTestFailed) {
                event = 'REQUEST_CHANGES';
                review_body += `**üö® Urgent: The Tkinter application failed to run for 10 seconds or crashed!**\n`;
                review_body += `Please ensure the \`src/main.py\` application starts correctly and remains stable for at least 10 seconds without throwing unhandled exceptions. This is a critical issue that must be resolved before merging.\n\n`;
                
                // If app test failed, then all other failures become blocking as well
                const allFailedOutcomes = Object.keys(outcomes).filter(key => outcomes[key].conclusion === 'failure' && key !== 'app_test');
                if (allFailedOutcomes.length > 0) {
                    review_body += `---\n\nAdditionally, I found other issues:\n\n`;
                    for (const key of allFailedOutcomes) {
                        review_body += `* **${outcomes[key].title}**\n    * **To Fix:** ${fix_guides[key]}\n\n`;
                    }
                }
                review_body += `\n---\n\nPlease fix the application test failure first. Once that's resolved, I can re-review.`;

            } else { // App Test Passed (Good!)
                if (hasAnyLinterIssues || hasCodeQLFailures) {
                    // App Test passed, so linters/CodeQL are advisory. Still APPROVE.
                    event = 'APPROVE';
                    review_body += `Everything looks good to merge! The application test passed successfully. üëç\n\n`;
                    review_body += `However, I've found some **advisory suggestions** to improve the code quality. These are not blockers for merging but are highly recommended:\n\n---\n\n`;
                    
                    const advisoryOutcomes = Object.keys(outcomes).filter(key => 
                        (outcomes[key].conclusion === 'failure' && key !== 'app_test') || 
                        (summaryDiagnostics[key] && summaryDiagnostics[key].length > 0) ||
                        (inlineComments.some(c => c.body.includes(`[${key}]`))) // Check if any inline comments are from this linter
                    );

                    for (const key of advisoryOutcomes) {
                        review_body += `* **${outcomes[key]?.title || key}**\n`;
                        if (key === 'bandit' || key === 'mypy') {
                            review_body += `    * Please see the inline comments for details on specific issues.`;
                        } else if (key === 'codeql') {
                            review_body += `    * Go to the **'Security' tab** for detailed advice.`;
                        } else { // Generic linter fix guides
                             review_body += `    * See the 'Detailed Linter Findings' below or run \`/format\` to fix.`;
                        }
                        review_body += `\n`;
                    }

                    review_body += `\n---\n`;
                    // Add aggregated diagnostics to the summary
                    let aggregatedDetails = '';
                    for (const linterName in summaryDiagnostics) {
                        if (summaryDiagnostics[linterName].length > 0) {
                            aggregatedDetails += `\n### ${outcomes[linterName]?.title || linterName} (Aggregated):\n`;
                            for (const msg of summaryDiagnostics[linterName]) {
                                aggregatedDetails += `- ${msg}\n`;
                            }
                        }
                    }

                    if (aggregatedDetails) {
                        review_body += `\n## üìã Detailed Linter Findings (Aggregated):\n`;
                        review_body += aggregatedDetails;
                        review_body += `\n---\n`;
                    }

                    review_body += `\nFeel free to merge, but addressing these suggestions would be great!`;

                } else {
                    review_body += `Everything looks great! All checks passed, including the application test. Keep up the fantastic work! üëç`;
                    is_perfect = true;
                }
            }

            // Post the review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: event,
              body: review_body,
              comments: inlineComments // Only the prioritized comments go here
            });
            
            // Remove label only if perfect (app test passed, no linter/codeql issues)
            if (is_perfect) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'priestybot-review'
                });
              } catch (error) {
                console.log("Could not remove 'priestybot-review' label, it might not exist or already be removed.");
              }
            }