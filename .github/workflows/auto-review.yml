name: PriestyBot Auto-Review

on:
  pull_request:
    types: [review_requested]

env:
  # This token needs 'repo' scope to approve PRs and post comments.
  APPROVER_TOKEN: ${{ secrets.APPROVER_TOKEN }}
  # Reviewdog uses this token to post comments.
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    # Only run if the requested reviewer is our bot
    if: github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: üí¨ Acknowledging the review request...
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const bot_name = "PriestyBot"; // Your bot's name
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });

            const hasAlreadyCommented = comments.some(
              comment => comment.user.login === bot_name && comment.body.includes("Thanks for asking me to review")
            );

            if (!hasAlreadyCommented) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: "Hey @${{ github.event.sender.login }}! üëã Thanks for asking me to review. I'll take a look at the code now and get back to you shortly. üßê"
              });
            } else {
              console.log("Bot has already posted the initial acknowledgment. Skipping.");
            }

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python Dependencies & System Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # The app test needs a display server, xvfb provides a virtual one
          sudo apt-get update && sudo apt-get install -y xvfb
      
      # CORRECTED PART 1: Install reviewdog using its own action
      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Run Linters & Format Check with Reviewdog
        id: lint_and_format
        continue-on-error: true # Continue even if linters find issues, so we can summarize
        run: |
          # Run flake8 and pipe results to reviewdog for in-line comments
          flake8 src --format=default | reviewdog -f=flake8 -name="flake8 Linter" -reporter="github-pr-review" -level="warning"

          # Run black in check mode
          black --check src

      - name: üß™ Run Tkinter App Test
        id: app_test
        continue-on-error: true # We need to check the exit code manually
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          xvfb-run timeout 10s python src/main.py
          exit_code=$?
          
          # Check the exit code. 0 (clean exit) or 124 (timeout) are considered success.
          if [ $exit_code -eq 0 ] || [ $exit_code -eq 124 ]; then
            echo "App test passed! The app ran without crashing."
            exit 0
          else
            echo "App test failed! The app crashed on launch."
            exit 1
          fi

      - name: üìù Post Final Review Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const lint_outcome = '${{ steps.lint_and_format.outcome }}';
            const test_outcome = '${{ steps.app_test.outcome }}';
            const pr_author = context.payload.pull_request.user.login;
            
            let review_body = `Hi @${pr_author}, I've finished my review!\n\nHere's the summary:\n\n`;
            let event = 'APPROVE'; // Default to approve
            
            // Linter and Format Check Summary
            if (lint_outcome === 'success') {
              review_body += '‚úÖ **Code Quality & Style:** Passed. Great job!\n';
            } else {
              review_body += '‚ùå **Code Quality & Style:** I found some issues. Please check my in-line comments for details. You can try running `/format` to fix style issues automatically.\n';
              event = 'REQUEST_CHANGES';
            }
            
            // App Test Summary
            if (test_outcome === 'success') {
              review_body += '‚úÖ **Application Test:** Passed. The app launched successfully!\n';
            } else {
              review_body += '‚ùå **Application Test:** Failed. The app seems to crash on startup. Check the workflow logs for errors.\n';
              event = 'REQUEST_CHANGES';
            }
            
            // Final Verdict
            if (event === 'APPROVE') {
              review_body += `\nEverything looks good to me. I'm approving this PR. Keep up the great work! üëç`;
            } else {
              review_body += `\nPlease address the feedback above. Let me know if you have any questions!`;
            }

            // Submit the review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: event,
              body: review_body
            });