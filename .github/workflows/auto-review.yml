name: PriestyBot Auto-Review

on:
  pull_request:
    types: [review_requested]

permissions:
  contents: read # Read-only is enough for this workflow
  pull-requests: write
  checks: write
  security-events: write # For Trivy scan results

jobs:
  review:
    if: github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Generate a temporary token for the bot's identity
      - name: Generate Bot Token
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.PRIESTYBOT_APP_ID }}
          private_key: ${{ secrets.PRIESTYBOT_PRIVATE_KEY }}

      # Step 2: Create the initial status comment
      - name: üí¨ Create Progress Comment
        id: progress_comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          result-encoding: string
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "Hey @${{ github.sender.login }}! I'm on it. üßê\n\n**My review checklist:**\n- [ ] Code Quality (Linting & Formatting)\n- [ ] Application Test\n- [ ] Security Scan"
            });
            return comment.id;

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python, Cache & Install Dependencies
        # (Combined these steps for brevity)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y xvfb

      # --- Code Quality Steps ---
      - name: üíß Run Linters (flake8 & black)
        id: quality_checks
        continue-on-error: true
        run: |
          pip install flake8 black reviewdog
          # Pipe results to reviewdog
          (flake8 --diff src && black --check --diff src) | reviewdog -f=flake8 -f=diff -name="Code Quality" -reporter=github-pr-check -filter-mode=diff_context -fail-on-error
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ steps.get_token.outputs.token }}

      - name: üìù Update Progress on Code Quality
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          script: |
            const outcome = '${{ steps.quality_checks.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const body = "Hey @${{ github.sender.login }}! I'm on it. üßê\n\n**My review checklist:**\n- [" + outcome + "] Code Quality (Linting & Formatting)\n- [ ] Application Test\n- [ ] Security Scan";
            await github.rest.issues.updateComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: ${{ steps.progress_comment.outputs.result }}, body: body
            });

      # --- App Test & Security Scan steps would follow the same pattern... ---
      # Each step runs its test, and the following step updates the progress comment.

      - name: üìù Post Final Review Summary
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          script: |
            // Final review logic goes here...
            // It should build the final review message based on the outcome of all previous steps.

            // At the very end, delete the progress comment to keep the PR clean
            await github.rest.issues.deleteComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: ${{ steps.progress_comment.outputs.result }}
            });

            // Post the final review
            await github.rest.pulls.createReview({ /* ... */ });