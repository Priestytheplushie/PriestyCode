name: PriestyBot Auto-Review & CodeQL

on:
  pull_request:
    types: [review_requested, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  lint-and-test:
    name: Lint & Test
    if: |
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    outputs:
      flake8_report: ${{ steps.flake8.outputs.report }}
      black_report: ${{ steps.black.outputs.report }}
      isort_report: ${{ steps.isort.outputs.report }}
      bandit_report: ${{ steps.bandit.outputs.report }}
      mypy_report: ${{ steps.mypy.outputs.report }}
      app_test_outcome: ${{ steps.app_test.outcome }}
    steps:
      - name: Add 'priestybot-review' Label & Comment
        if: github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['priestybot-review']
            });
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `Hey @${context.payload.pull_request.user.login}! 👋 Thanks for the review request. I'll get started right away.\n\nP.S. I've added the \`priestybot-review\` label. I'll keep re-reviewing any new changes you push. If you want me to stop, just remove the label!`
            });
      
      - name: 💬 Acknowledging New Changes
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Just noticed you pushed new changes! Taking another look... 🧐`
            });

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit

      - name: 💧 Run Linter (flake8)
        id: flake8
        continue-on-error: true
        run: echo "report=$(flake8 src --format='%(path)s:%(row)d:%(col)d: [%(code)s] %(text)s' | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: 💅 Run Format Check (black)
        id: black
        continue-on-error: true
        run: echo "report=$(black --check --diff src 2>&1 | base64 -w 0)" >> $GITHUB_OUTPUT
      
      - name: sorted? Run Import Sort Check (isort)
        id: isort
        continue-on-error: true
        run: echo "report=$(isort --check-only --diff src 2>&1 | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: 🔒 Run Security Check (bandit)
        id: bandit
        continue-on-error: true
        run: echo "report=$(bandit -r src -f custom --msg-template '{path}:{line}: [{test_id}] {msg}' | base64 -w 0)" >> $GITHUB_OUTPUT
      
      - name: 🧐 Run Type Check (mypy)
        id: mypy
        continue-on-error: true
        run: echo "report=$(mypy src | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: 🧪 Run Tkinter App Test
        id: app_test
        continue-on-error: true
        run: |
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test PASSED: Exited cleanly before timeout."
            exit 0
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test PASSED: Ran for 10s and was terminated as expected."
              exit 0
            else
              echo "App test FAILED: App crashed with exit code $exit_code."
              exit 1
            fi
          fi

  codeql:
    name: CodeQL Analysis
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  final-review:
    name: Post Final Review
    if: always() && needs.lint-and-test.result != 'skipped'
    runs-on: ubuntu-latest
    needs: [lint-and-test, codeql]
    steps:
      - name: 📝 Post Final Review Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;

            // Helper to decode Base64 reports
            const atob = (b64) => Buffer.from(b64, 'base64').toString('utf-8');

            // Fetch the diff to identify changed lines
            const { data: diff } = await github.rest.pulls.get({
              owner, repo, pull_number,
              mediaType: { format: "diff" }
            });
            
            const changedLines = {};
            let currentFile = "";
            for (const line of diff.split('\n')) {
              if (line.startsWith('+++ b/')) {
                currentFile = line.substring(6);
                changedLines[currentFile] = new Set();
              }
              if (line.startsWith('@@')) {
                const match = line.match(/\+([0-9]+)/);
                if (match) {
                  let startLine = parseInt(match[1]);
                  let currentLineInHunk = startLine;
                  const hunkLines = line.substring(line.indexOf('@@') + 2).split('\n');
                  // This is a simplified diff parser. A more robust solution might be needed for complex diffs.
                  // For now, we'll add all lines in the 'add' part of the hunk.
                  const hunkInfo = line.split("@@")[1];
                  const lines = diff.substring(diff.indexOf(hunkInfo) + hunkInfo.length).split('\n');
                  let lineNumInFile = startLine;
                  for (const diffLine of lines) {
                    if (diffLine.startsWith('+') && !diffLine.startsWith('+++')) {
                      changedLines[currentFile].add(lineNumInFile);
                      lineNumInFile++;
                    } else if (!diffLine.startsWith('-')) {
                      lineNumInFile++;
                    }
                  }
                }
              }
            }
            
            const inlineComments = [];
            const summaryIssues = {};

            function addIssue(linter, message) {
              const match = message.match(/^([^:]+):(\d+):/);
              if (match && changedLines[match[1]]?.has(parseInt(match[2]))) {
                inlineComments.push({
                  path: match[1],
                  line: parseInt(match[2]),
                  body: `**[${linter}]**: ${message.substring(message.indexOf(']') + 2)}`
                });
              } else {
                summaryIssues[linter] = summaryIssues[linter] || [];
                summaryIssues[linter].push(message);
              }
            }

            // Process reports
            const reports = {
              flake8: atob("${{ needs.lint-and-test.outputs.flake8_report }}"),
              bandit: atob("${{ needs.lint-and-test.outputs.bandit_report }}"),
              mypy: atob("${{ needs.lint-and-test.outputs.mypy_report }}"),
              isort: atob("${{ needs.lint-and-test.outputs.isort_report }}"),
              black: atob("${{ needs.lint-and-test.outputs.black_report }}")
            };

            reports.flake8.split('\n').filter(l => l).forEach(l => addIssue('flake8', l));
            reports.bandit.split('\n').filter(l => l).forEach(l => addIssue('bandit', l));
            reports.mypy.split('\n').filter(l => l).forEach(l => addIssue('mypy', l));
            
            // Handle linters with non-standard output (like black and isort)
            if (reports.isort.includes("ERROR")) {
              summaryIssues['isort'] = reports.isort.split('\n').filter(l => l);
            }
            if (reports.black.includes("would be reformatted")) {
               summaryIssues['black'] = reports.black.split('\n').filter(l => l);
            }

            // Determine review status
            const appTestPassed = "${{ needs.lint-and-test.outputs.app_test_outcome }}" === 'success';
            let event = appTestPassed ? 'APPROVE' : 'REQUEST_CHANGES';
            let review_body = `Hi @${context.payload.pull_request.user.login}, I've finished my review!\n\n`;

            if (!appTestPassed) {
              review_body += `**🚨 Critical Issue: The application test failed!**\nThis is a blocking issue. Please check the workflow logs to debug why the app isn't running correctly.\n\n---\n\n`;
            } else {
              review_body += `**✅ The application test passed!** This PR is approved and can be merged.\n\n---\n\n`;
            }
            
            const hasSummaryIssues = Object.keys(summaryIssues).length > 0;
            const hasInlineComments = inlineComments.length > 0;

            if (hasSummaryIssues || hasInlineComments) {
              review_body += `I have some suggestions to improve code quality. They are **advisory** if the app test passed, but **required** if it failed.\n\n`;
              if (hasInlineComments) {
                review_body += `* I've left some comments directly on the changed lines of your code.\n`;
              }
              if (hasSummaryIssues) {
                review_body += `* Below is a summary of other findings:\n\n`;
                for (const linter in summaryIssues) {
                  review_body += `### ${linter} Findings\n\`\`\`\n${summaryIssues[linter].join('\n')}\n\`\`\`\n`;
                }
              }
            } else {
              review_body += `Everything looks perfectly clean! No issues found. Great job! 👍`;
            }
            
            // Submit the review
            await github.rest.pulls.createReview({
              owner, repo, pull_number,
              event,
              body: review_body,
              comments: inlineComments
            });