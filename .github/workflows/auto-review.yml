name: PriestyBot Auto-Review & CodeQL

on:
  # FIXED: Add the required trigger for pushes to the main branch
  push:
    branches:
      - main # Or your default branch name

  # Keep the existing triggers for pull requests
  pull_request:
    types: [review_requested, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  APPROVER_TOKEN: ${{ secrets.APPROVER_TOKEN }}
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  lint-and-test:
    name: Lint & Test
    # FIXED: This job should only run on pull requests, not on pushes to main.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      # ... outputs ...
      flake8_outcome: ${{ steps.flake8.outcome }}
      black_outcome: ${{ steps.black.outcome }}
      isort_outcome: ${{ steps.isort.outcome }}
      bandit_outcome: ${{ steps.bandit.outcome }}
      mypy_outcome: ${{ steps.mypy.outcome }}
      app_test_outcome: ${{ steps.app_test.outcome }}
    steps:
      # ... all linting and test steps remain the same ...
      - name: üí¨ Acknowledging the review request...
        if: github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Hey @${context.payload.pull_request.user.login}! üëã Thanks for the review request. I'll get started right away. üßê`
            });

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit reviewdog
          sudo apt-get update && sudo apt-get install -y xvfb

      - name: üíß Run Linter (flake8)
        id: flake8
        continue-on-error: true
        uses: reviewdog/action-flake8@v3
        with:
          filter_mode: "diff_context"
          fail_on_error: true
          reporter: github-pr-check
          level: warning

      - name: üíÖ Run Format Check (black)
        id: black
        continue-on-error: true
        uses: reviewdog/action-black@v3
        with:
          filter_mode: "diff_context"
          fail_on_error: true
          reporter: github-pr-check
          level: warning
          black_args: "--check --diff src"

      - name: sorted? Run Import Sort Check (isort)
        id: isort
        continue-on-error: true
        run: |
          isort --check --diff src | reviewdog -f=diff -f.isort --reporter=github-pr-check --level=warning -name="isort-check"
      
      - name: üîí Run Security Check (bandit)
        id: bandit
        continue-on-error: true
        run: |
          bandit -r src -f txt | reviewdog -f=bandit -name="bandit-check" -reporter=github-pr-check -level=error

      - name: üßê Run Type Check (mypy)
        id: mypy
        continue-on-error: true
        run: |
          mypy src | reviewdog -f=mypy -name="mypy-check" -reporter=github-pr-check -level=error

      - name: üß™ Run Tkinter App Test
        id: app_test
        continue-on-error: true
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test result: PASSED (exited cleanly before timeout)"
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test result: PASSED (ran for 10s without crashing)"
              exit 0
            else
              echo "App test result: FAILED (crashed with an unexpected error)"
              exit $exit_code
            fi
          fi

  codeql:
    name: CodeQL Analysis
    # This job should run for both push to main and for PRs
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    outputs:
      analyze_outcome: ${{ steps.analyze.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # For PRs, check out the PR head. For pushes, check out the commit.
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        id: analyze
        uses: github/codeql-action/analyze@v3

  final-review:
    name: Post Final Review
    runs-on: ubuntu-latest
    needs: [lint-and-test, codeql]
    # FIXED: Ensure this job ONLY runs for pull requests and not pushes to main.
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: üìù Post Final Review Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            # ... (the script for posting the review remains exactly the same) ...
            const pr_author = context.payload.pull_request.user.login;
            const lintJobResult = '${{ needs.lint-and-test.result }}';
            const codeqlJobResult = '${{ needs.codeql.result }}';
            let review_body = `Hi @${pr_author}, I've finished my review!\n\n`;
            let event = 'APPROVE';

            // FIXED: Master check to see if the jobs themselves crashed.
            if (lintJobResult === 'failure' || codeqlJobResult === 'failure') {
              event = 'REQUEST_CHANGES';
              review_body += '‚ùå **Workflow Error:** One of the main check jobs (`Lint & Test` or `CodeQL`) failed unexpectedly. This is usually due to a configuration issue in the workflow file itself, not a problem with your code.\n\n';
              review_body += 'Please check the workflow logs in the "Checks" tab for the exact error message. I cannot approve this PR until the workflow runs successfully.';
            
            } else {
              // This detailed analysis will now only run if the jobs completed.
              const outcomes = {
                flake8: { outcome: '${{ needs.lint-and-test.outputs.flake8_outcome }}', isBlocker: false,
                  title: 'üé® Linting Issues (`flake8`)',
                  reason: 'This check helps maintain code quality and catch potential bugs or anti-patterns.',
                  fix: 'I have left inline comments with the details. Please review them and apply the suggested fixes.' },
                black: { outcome: '${{ needs.lint-and-test.outputs.black_outcome }}', isBlocker: false,
                  title: 'üé® Formatting & Style (`black`)',
                  reason: 'Consistent code style makes the project easier for everyone to read and maintain.',
                  fix: 'You can run `black src` locally to fix this. For an even easier fix, just **comment `/format` on this PR**, and I will do it for you!' },
                isort: { outcome: '${{ needs.lint-and-test.outputs.isort_outcome }}', isBlocker: false,
                  title: 'üé® Import Order (`isort`)',
                  reason: 'Keeping imports sorted makes dependencies clear and organized.',
                  fix: 'You can run `isort src` locally. This will also be fixed automatically if you use the **`/format`** command.' },
                bandit: { outcome: '${{ needs.lint-and-test.outputs.bandit_outcome }}', isBlocker: true,
                  title: 'üö® Security Analysis (`bandit`)',
                  reason: 'This check found a potential security vulnerability in the code.',
                  fix: 'Please check my inline comments for the specific vulnerability and how to address it.' },
                mypy: { outcome: '${{ needs.lint-and-test.outputs.mypy_outcome }}', isBlocker: true,
                  title: 'üö® Type Checking (`mypy`)',
                  reason: 'This check prevents bugs by ensuring data types are used correctly.',
                  fix: 'Check the `mypy` logs in the "Checks" tab for the exact line and error, or review my inline comments.' },
                app_test: { outcome: '${{ needs.lint-and-test.outputs.app_test_outcome }}', isBlocker: true,
                  title: 'üö® Application Test',
                  reason: 'The application must launch without crashing to ensure basic functionality.',
                  fix: 'The app failed to run for 10 seconds. Please check the workflow logs in the "Lint & Test" job for the full error message.' },
                codeql: { outcome: '${{ needs.codeql.outputs.analyze_outcome }}', isBlocker: true,
                  title: 'üö® Advanced Security (`CodeQL`)',
                  reason: 'CodeQL found a potential security or quality issue. Addressing this is critical.',
                  fix: `Go to the **'Security' tab** of this repository, find the new 'Code scanning alert' for this pull request, and follow the detailed remediation advice provided there.` }
              };
              
              const blockers = [];
              const suggestions = [];

              for (const key in outcomes) {
                if (outcomes[key].outcome === 'failure') {
                  if (outcomes[key].isBlocker) {
                    blockers.push(outcomes[key]);
                  } else {
                    suggestions.push(outcomes[key]);
                  }
                }
              }

              if (blockers.length === 0 && suggestions.length === 0) {
                review_body += `Everything looks great! All checks passed. Keep up the fantastic work! üëç`;
              } else {
                if (blockers.length > 0) {
                  event = 'REQUEST_CHANGES';
                  review_body += `I've found a few critical issues (üö®) that need your attention before this can be merged. Here's a breakdown:\n\n---\n\n`;
                  for (const item of blockers) {
                    review_body += `*   **${item.title}**\n    *   **Why:** ${item.reason}\n    *   **To Fix:** ${item.fix}\n\n`;
                  }
                }
                if (suggestions.length > 0) {
                  if (blockers.length === 0) {
                    review_body += `Everything looks good to merge, but I have a few minor suggestions (üé®) to improve the code:\n\n---\n\n`;
                  } else {
                    review_body += `I also found some minor suggestions:\n\n`;
                  }
                  for (const item of suggestions) {
                    review_body += `*   **${item.title}**\n    *   **Why:** ${item.reason}\n    *   **To Fix:** ${item.fix}\n\n`;
                  }
                }

                if (event === 'REQUEST_CHANGES') {
                  review_body += `\nPlease address the blocking issues. Let me know if you have questions!`;
                } else {
                  review_body += `\nSince there are no blocking issues, I'm approving this PR. Great work!`;
                }
              }
            }

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: event,
              body: review_body
            });
