name: PriestyBot PR Review

on:
  pull_request:
    types: [ review_requested ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-review:
    if: github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: ü§ñ PriestyBot, Reporting for Duty!
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body: "PriestyBot, reporting for duty! ü´° I'll start my review now and post a final summary once I'm done." });

      - name: üöö Getting the code...
        uses: actions/checkout@v4

      - name: üêç Setting up Python...
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: ‚ö° Caching dependencies for speed...
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üõ†Ô∏è Installing tools and linters...
        run: python -m pip install --upgrade pip && pip install -r requirements.txt && pip install mypy flake8 black isort

      - name: üê∂ Summoning the reviewdog...
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
          
      - name: üé® Reviewing Code Style (and posting inline comments)...
        id: linting
        continue-on-error: true # Ensures workflow continues to the summary step
        env:
          # This ensures PriestyBot posts the inline comments
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          LINTER_FAILED_ANY=false
          set -o pipefail

          # This logic posts comments directly AS IT FINDS THEM and reliably reports the overall status.
          # The -reporter=github-pr-review is ESSENTIAL for inline comments.
          if ! (flake8 src | reviewdog -efm="%f:%l:%c: %m" -name="flake8" -reporter=github-pr-review -fail-on-error=true); then LINTER_FAILED_ANY=true; fi
          if ! (mypy src | reviewdog -f=mypy -name="mypy" -reporter=github-pr-review -fail-on-error=true); then LINTER_FAILED_ANY=true; fi
          if ! (black --check --diff src | reviewdog -f=diff -f.diff.strip=1 -name="black" -reporter=github-pr-review -fail-on-error=true); then LINTER_FAILED_ANY=true; fi
          if ! (isort --check --diff src | reviewdog -f=diff -f.diff.strip=1 -name="isort" -reporter=github-pr-review -fail-on-error=true); then LINTER_FAILED_ANY=true; fi

          if [ "$LINTER_FAILED_ANY" = true ]; then
            echo "overall_status=FAILED" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=PASSED" >> "$GITHUB_OUTPUT"
          fi

      - name: üñ•Ô∏è Preparing the testing environment...
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: üß™ Running the critical App Test...
        id: app_test
        run: |
          if xvfb-run timeout 10s python src/main.py; then
            echo "status=PASSED" >> "$GITHUB_OUTPUT";
          else
            exit_code=$?; if [ $exit_code -eq 124 ]; then
              echo "status=PASSED" >> "$GITHUB_OUTPUT";
            else
              echo "status=FAILED" >> "$GITHUB_OUTPUT";
            fi
          fi

      - name: üìù Final Review and Team Huddle!
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const app_status = "${{ steps.app_test.outputs.status || 'FAILED' }}";
            const linter_status = "${{ steps.linting.outputs.overall_status || 'FAILED' }}";
            const pr_author = context.payload.pull_request.user.login;
            
            const app_check = app_status === 'PASSED' ? 'Passed ‚úÖ' : 'Failed ‚ùå';
            const linter_check = linter_status === 'PASSED' ? 'Looks good! ‚ú®' : 'Found some areas for improvement üî¨';

            let review_event = 'REQUEST_CHANGES';
            // Start the message by addressing the user!
            let body = `### PriestyBot Review Summary\n\nHello @${pr_author}! I've just finished reviewing your code. Here's a quick rundown of what I found:\n\n- **Application Test:** ${app_check}\n- **Linters:** ${linter_check}\n\n`;

            if (app_status === 'FAILED') {
              review_event = 'REQUEST_CHANGES';
              body += "The application test failed, which is the most critical issue. Please address that first!\n\n";
            } else if (app_status === 'PASSED' && linter_status === 'FAILED') {
              review_event = 'REQUEST_CHANGES';
              body += `üí° **Tip:** For quick fixes on formatting and import sorting, you can comment \`/format\` on this PR.\n\nThese linter suggestions are advisory. If you believe they are incorrect or wish to proceed anyway, you can use the \`/approve\` command.\n\nRequesting changes due to linter issues. Please check the details in any inline comments I've left. Remember, you can use \`/approve\` to bypass them if needed.`
            } else {
              review_event = 'APPROVE';
              body += "Everything looks fantastic! Great job. I'm approving this PR. Let's get it merged! üéâ";
            }
            
            await github.rest.pulls.createReview({ 
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              pull_number: context.issue.number, 
              body: body, 
              event: review_event,
            });