name: PriestyBot PR Review

on:
  pull_request:
    types: [ review_requested ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-review:
    if: github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: ü§ñ PriestyBot, Reporting for Duty!
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body: "PriestyBot, reporting for duty! ü´° I'll start my review now and post a final summary once I'm done. Wish me luck! üöÄ" });

      - name: üöö Getting the code...
        uses: actions/checkout@v4

      - name: üêç Setting up Python...
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: ‚ö° Caching dependencies for speed...
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üõ†Ô∏è Installing tools and linters...
        run: python -m pip install --upgrade pip && pip install -r requirements.txt && pip install mypy flake8 black isort

      - name: üê∂ Summoning the reviewdog...
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
          
      - name: üé® Performing Hybrid Linting Review...
        id: linting
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          # This robust script will NOT crash and WILL correctly report failures.
          echo "flake8_status=PASSED" >> $GITHUB_OUTPUT
          echo "black_status=PASSED" >> $GITHUB_OUTPUT
          echo "isort_status=PASSED" >> $GITHUB_OUTPUT
          echo "mypy_status=PASSED" >> $GITHUB_OUTPUT
          LINTER_FAILED_ANY=false

          run_linter() {
              local name="$1"; local cmd="$2"; local reviewdog_flags="$3"
              echo "--- Running $name ---"
              
              # This structure is guaranteed to not crash the step.
              lint_output=$($cmd 2>&1 || true)
              exit_code=${PIPESTATUS[0]}
              echo "-> $name finished with real exit code: $exit_code"
              
              if [ $exit_code -ne 0 ]; then
                  echo "-> $name found issues. Reporting failure."
                  LINTER_FAILED_ANY=true
                  echo "${name}_status=FAILED" >> $GITHUB_OUTPUT
                  echo "$lint_output" > "${name}_report.txt"
                  echo "$lint_output" | reviewdog -name="$name" -reporter=github-pr-review $reviewdog_flags
              fi
          }
          run_linter "flake8" "flake8 src" "-efm='%f:%l:%c: %m'"
          run_linter "black" "black --check --diff src" "-f=diff -f.diff.strip=1"
          run_linter "isort" "isort --check --diff src" "-f=diff"
          run_linter "mypy" "mypy src" "-f=mypy"

          if [ "$LINTER_FAILED_ANY" = true ]; then
            echo "overall_status=FAILED" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=PASSED" >> "$GITHUB_OUTPUT"
          fi

      - name: üñ•Ô∏è Preparing the testing environment...
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: üß™ Running the critical App Test...
        id: app_test
        run: |
          if xvfb-run timeout 10s python src/main.py; then echo "status=PASSED" >> "$GITHUB_OUTPUT";
          else
            exit_code=$?; if [ $exit_code -eq 124 ]; then echo "status=PASSED" >> "$GITHUB_OUTPUT";
            else echo "status=FAILED" >> "$GITHUB_OUTPUT"; fi
          fi

      - name: üìù Final, Intelligent Review and Team Huddle!
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const fs = require('fs');
            const pr_author = context.payload.pull_request.user.login;
            const app_status = "${{ steps.app_test.outputs.status || 'FAILED' }}";
            const linter_status = "${{ steps.linting.outputs.overall_status || 'FAILED' }}";
            const flake8_status = "${{ steps.linting.outputs.flake8_status }}";
            const black_status = "${{ steps.linting.outputs.black_status }}";
            const isort_status = "${{ steps.linting.outputs.isort_status }}";
            const mypy_status = "${{ steps.linting.outputs.mypy_status }}";
            
            const app_check = app_status === 'PASSED' ? 'Passed ‚úÖ' : 'Failed ‚ùå';
            const linter_check = linter_status === 'PASSED' ? 'Looks good! ‚ú®' : 'Found some areas for improvement üî¨';

            let review_event = 'REQUEST_CHANGES';
            let body = `### PriestyBot Review Summary\n\nHello @${pr_author}! I've just finished reviewing your Python code. Here's a quick rundown of what I found:\n\n- **Application Test:** ${app_check}\n- **Linters:** ${linter_check}\n\n`;

            function getReport(name) {
              if (fs.existsSync(`${name}_report.txt`)) { return fs.readFileSync(`${name}_report.txt`, 'utf8'); }
              return 'No output captured (linter passed).';
            }

            if (app_status === 'FAILED') {
              review_event = 'REQUEST_CHANGES';
              body += "The application test failed, which is the most critical issue. Please address that first!\n\n";
            } else if (app_status === 'PASSED' && linter_status === 'FAILED') {
              review_event = 'REQUEST_CHANGES';
              
              // This is the new, clearer explanation for the developer.
              body += "To help you focus, I've separated my findings into two groups:\n\n" +
                      "üîπ **For this PR:** I've left inline comments for any issues found on the specific lines you've changed.\n" +
                      "üîπ **Codebase-Wide:** For pre-existing issues found elsewhere in the project, I've included the full reports in the collapsible sections below. **You are not expected to fix these to get this PR approved.**\n\n---\n\n";
              
              if (flake8_status === 'FAILED') { body += `<details><summary><strong>flake8 found issues:</strong></summary>\n\n\`\`\`\n${getReport('flake8')}\n\`\`\`\n\n</details>\n` }
              if (black_status === 'FAILED') { body += `<details><summary><strong>Black (Code Formatter) found issues:</strong></summary>\n\n\`\`\`diff\n${getReport('black')}\n\`\`\`\n\n</details>\n`}
              if (isort_status === 'FAILED') { body += `<details><summary><strong>isort (Import Sorter) found issues:</strong></summary>\n\n\`\`\`\n${getReport('isort')}\n\`\`\`\n\n</details>\n` }
              if (mypy_status === 'FAILED') { body += `<details><summary><strong>mypy (Type Checker) found issues:</strong></summary>\n\n\`\`\`\n${getReport('mypy')}\n\`\`\`\n\n</details>\n` }

              body += `\nüí° **Tip:** For quick fixes on formatting and import sorting, you can comment \`/format\` on this PR.\n\nThese linter suggestions are advisory. If you believe they are incorrect or wish to proceed anyway, you can use the \`/approve\` command.`
            } else {
              review_event = 'APPROVE';
              body += "Everything looks fantastic! Great job. I'm approving this PR. Let's get it merged! üéâ";
            }
            
            await github.rest.pulls.createReview({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, body: body, event: review_event });