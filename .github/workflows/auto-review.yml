# .github/workflows/priestybot.yml
# This workflow defines PriestyBot, a GitHub Action that automatically reviews Python pull requests.

name: PriestyBot PR Reviewer

on:
  pull_request:
    types: [review_requested]

permissions:
  contents: write
  pull-requests: write

jobs:
  review:
    name: PriestyBot Review
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1

      - name: ü§ñ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit mypy pylint flake8 black isort reviewdog-github-pr-review
          # Install other project dependencies if needed from requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: üìä Configure Git
        run: |
          git config user.name "PriestyBot"
          git config user.email "priestybot@users.noreply.github.com"

      - name: üîç Check for Stop Command
        id: stop_check
        run: |
          STOP_COMMAND="@PriestyBot stop"
          PR_COMMENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.APPROVER_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          if echo "$PR_COMMENTS" | grep -q "$STOP_COMMAND"; then
            echo "stop=true" >> $GITHUB_OUTPUT
            echo "Stop command found. Halting review process."
          fi
        continue-on-error: true

      - name: üèÉ‚Äç‚ôÇÔ∏è Run Linters with Reviewdog
        if: steps.stop_check.outputs.stop != 'true'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          # Run linters and pipe output to reviewdog
          bandit -r . -f json | reviewdog -f=rdjson -name="Bandit (Security)" -reporter=github-pr-review
          mypy . --ignore-missing-imports | reviewdog -f=mypy -name="MyPy (Types)" -reporter=github-pr-review
          pylint **/*.py | reviewdog -f=pylint -name="Pylint" -reporter=github-pr-review
          flake8 . | reviewdog -f=flake8 -name="Flake8" -reporter=github-pr-review
          black --check . 2> black_results.txt || true
          isort --check-only . 2> isort_results.txt || true

      - name: üß™ Run Tkinter App Test
        id: app_test
        if: steps.stop_check.outputs.stop != 'true'
        continue-on-error: true
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test PASSED: Exited cleanly before timeout."
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test PASSED: Ran for 10s and was terminated as expected."
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "App test FAILED: App crashed with exit code $exit_code."
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: üìù Generate and Post Review
        if: steps.stop_check.outputs.stop != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const app_test_status = "${{ steps.app_test.outputs.status }}";
            const fs = require('fs');

            let black_output = fs.readFileSync('black_results.txt', 'utf8').trim();
            let isort_output = fs.readFileSync('isort_results.txt', 'utf8').trim();

            let linter_failures = [];
            if (black_output) linter_failures.push(`**Black:**\n\`\`\`\n${black_output}\n\`\`\``);
            if (isort_output) linter_failures.push(`**isort:**\n\`\`\`\n${isort_output}\n\`\`\``);

            let body = `### PriestyBot Review Summary\n\nHello there! I've reviewed your Python code. Here's a summary of what I found:\n\n`;
            body += `* **Application Test:** ${app_test_status === 'success' ? 'Passed ‚úÖ' : 'Failed ‚ùå'}\n`;

            if (linter_failures.length > 0) {
              body += `* **Linters:** Found issues üîç\n\n`;
              body += linter_failures.join('\n');
              if (black_output || isort_output) {
                  body += `\n\nüí° **Tip:** You can automatically fix formatting issues by commenting \`/format\` on this PR.`;
              }
              body += `\n\nThese linter suggestions are advisory. If you believe they are incorrect or wish to proceed anyway, you can use the \`/approve\` command.`;
            } else {
              body += `* **Linters:** All passed! üéâ\n`;
            }

            let event_type;
            if (app_test_status === 'failure') {
              event_type = 'REQUEST_CHANGES';
              body += "\n\nI have to request changes because the application tests failed. Please fix the issues and push your changes.";
            } else if (linter_failures.length > 0) {
              event_type = 'REQUEST_CHANGES';
              body += "\n\nRequesting changes due to linter issues. See the details above and in the inline comments.";
            } else {
              event_type = 'APPROVE';
              body += "\n\nEverything looks great! I'm approving this pull request. Great job! üëç";
            }

            github.rest.pulls.createReview({
              owner,
              repo,
              pull_number: pr_number,
              body: body,
              event: event_type,
            });
