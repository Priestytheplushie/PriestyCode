name: PriestyBot Auto-Review

on:
  pull_request:
    types: [review_requested]

env:
  APPROVER_TOKEN: ${{ secrets.APPROVER_TOKEN }}
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    if: github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: üí¨ Acknowledging the review request...
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const bot_name = "PriestyBot";
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            const hasAlreadyCommented = comments.some(
              comment => comment.user.login === bot_name && comment.body.includes("Thanks for asking me to review")
            );
            if (!hasAlreadyCommented) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: "Hey @${{ github.event.sender.login }}! üëã Thanks for asking me to review. I'll take a look at the code now and get back to you shortly. üßê"
              });
            }

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y xvfb

      - name: üíß Run Linter (flake8) on Changed Files
        id: lint
        uses: reviewdog/action-flake8@v3
        with:
          filter_mode: "diff_context"
          fail_on_error: false
          reporter: github-pr-review 
          level: warning

      - name: üíÖ Run Format Check (black) on Changed Files
        id: format_check
        uses: reviewdog/action-black@v3
        with:
          filter_mode: "diff_context"
          fail_on_error: false
          reporter: github-pr-review
          level: warning
          black_args: "--check --diff src"
      
      - name: üß™ Run Tkinter App Test
        id: app_test
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          # THIS LINE IS THE FIX: Run as a module (-m) to fix Python's import paths.
          (xvfb-run timeout 10s python -m src.main)
          exit_code=$?
          echo "Test command finished with exit code: $exit_code"

          if [ $exit_code -eq 0 ] || [ $exit_code -eq 124 ]; then
            echo "App test result: PASSED"
            exit 0
          else
            echo "App test result: FAILED"
            exit 1
          fi

      - name: üìù Post Final Review Summary
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.APPROVER_TOKEN }}
          script: |
            const lint_conclusion = '${{ steps.lint.conclusion }}';
            const format_conclusion = '${{ steps.format_check.conclusion }}';
            const test_conclusion = '${{ steps.app_test.conclusion }}';
            const pr_author = context.payload.pull_request.user.login;
            
            let review_body = `Hi @${pr_author}, I've finished my review!\n\nHere's the summary:\n\n`;
            let event = 'APPROVE';
            
            if ((lint_conclusion === 'success' || lint_conclusion === 'skipped') && (format_conclusion === 'success' || format_conclusion === 'skipped')) {
              review_body += '‚úÖ **Code Quality & Style:** Passed. Great job!\n';
            } else {
              review_body += '‚ùå **Code Quality & Style:** I found some issues. Please check my in-line comments for details. You can try running `/format` to fix style issues automatically.\n';
              event = 'REQUEST_CHANGES';
            }
            
            if (test_conclusion === 'success') {
              review_body += '‚úÖ **Application Test:** Passed. The app launched successfully!\n';
            } else {
              review_body += '‚ùå **Application Test:** Failed. The app seems to crash on startup. Check the workflow logs for errors.\n';
              event = 'REQUEST_CHANGES';
            }
            
            if (event === 'APPROVE') {
              review_body += `\nEverything looks good to me. I'm approving this PR. Keep up the great work! üëç`;
            } else {
              review_body += `\nPlease address the feedback above. Let me know if you have any questions!`;
            }

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: event,
              body: review_body
            });