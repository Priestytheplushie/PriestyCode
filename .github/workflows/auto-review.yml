name: PriestyBot Auto-Review & CodeQL

on:
  push:
    branches:
      - main
  pull_request:
    types: [review_requested, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  lint-and-test:
    name: Lint & Test
    if: |
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    outputs:
      flake8_outcome: ${{ steps.flake8.conclusion }}
      black_outcome: ${{ steps.black.conclusion }}
      isort_outcome: ${{ steps.isort.conclusion }}
      bandit_outcome: ${{ steps.bandit.conclusion }}
      mypy_outcome: ${{ steps.mypy.conclusion }}
      app_test_outcome: ${{ steps.app_test.conclusion }}
    steps:
      - name: Add 'priestybot-review' Label
        if: github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['priestybot-review']
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Hey @${context.payload.pull_request.user.login}! üëã Thanks for the review request. I'll get started right away.\n\nP.S. I've added the \`priestybot-review\` label. I'll keep re-reviewing any new changes you push. If you want me to stop, just remove the label!`
            });
      - name: üí¨ Acknowledging new changes
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Just noticed you pushed new changes! Taking another look... üßê`
            });

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Set up reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit

      - name: Create linter-reports directory
        run: mkdir -p linter-reports

      - name: üíß Run Linter (flake8)
        id: flake8
        continue-on-error: true # Keep true to allow other linters to run
        run: |
          flake8 src > flake8_raw_output.txt || true
          if [ -s flake8_raw_output.txt ]; then
            cat flake8_raw_output.txt | reviewdog -f=flake8 -reporter=rdjson -filter-mode=added > linter-reports/flake8.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/flake8.rdjson
          fi

      - name: üíÖ Run Format Check (black)
        id: black
        continue-on-error: true
        run: |
          black --check src > black_raw_output.txt 2>&1 || true # Redirect stderr to stdout for black's output
          if [ -s black_raw_output.txt ]; then
            cat black_raw_output.txt | reviewdog -f=black -reporter=rdjson -filter-mode=added > linter-reports/black.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/black.rdjson
          fi
      
      - name: sorted? Run Import Sort Check (isort)
        id: isort
        continue-on-error: true
        run: |
          isort --check src > isort_raw_output.txt || true
          if [ -s isort_raw_output.txt ]; then
            cat isort_raw_output.txt | reviewdog -f=isort -reporter=rdjson -filter-mode=added > linter-reports/isort.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/isort.rdjson
          fi
      
      - name: üîí Run Security Check (bandit)
        id: bandit
        continue-on-error: true
        run: |
          bandit -r src -f json > bandit_raw_output.json || true
          if [ -s bandit_raw_output.json ]; then
            cat bandit_raw_output.json | reviewdog -f=rdjson -name="bandit" -reporter=rdjson -filter-mode=added > linter-reports/bandit.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/bandit.rdjson
          fi

      - name: üßê Run Type Check (mypy)
        id: mypy
        continue-on-error: true
        run: |
          mypy src > mypy_raw_output.txt || true
          if [ -s mypy_raw_output.txt ]; then
            cat mypy_raw_output.txt | reviewdog -f=mypy -reporter=rdjson -filter-mode=added > linter-reports/mypy.rdjson
          else
            echo "{ \"diagnostics\": [] }" > linter-reports/mypy.rdjson
          fi

      - name: üß™ Run Tkinter App Test
        id: app_test
        continue-on-error: true
        run: |
          echo "Starting the Tkinter app in a virtual display..."
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test result: PASSED (exited cleanly before timeout)"
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test result: PASSED (ran for 10s without crashing)"
              exit 0
            else
              echo "App test result: FAILED (crashed with an unexpected error)"
              exit $exit_code
            fi
          fi
      
      - name: Upload Linter Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: linter-reports
          path: linter-reports/*.rdjson
          retention-days: 1

  codeql:
    name: CodeQL Analysis
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot') ||
      (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'priestybot-review'))
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    outputs:
      analyze_outcome: ${{ steps.analyze.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        id: analyze
        uses: github/codeql-action/analyze@v3

  final-review:
    name: Post Final Review
    if: always() && needs.lint-and-test.result != 'skipped'
    runs-on: ubuntu-latest
    needs: [lint-and-test, codeql]
    steps:
      - name: Download Linter Reports
        uses: actions/download-artifact@v4
        with:
          name: linter-reports
          path: linter-reports

      - name: üìù Post Final Review Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const comments = [];
            const reportDir = './linter-reports';
            try {
              const files = fs.readdirSync(reportDir);
              for (const file of files) {
                if (file.endsWith('.rdjson')) {
                  const content = fs.readFileSync(path.join(reportDir, file), 'utf8');
                  if (!content) {
                      console.log(`File ${file} is empty, skipping.`);
                      continue;
                  }
                  let report;
                  try {
                      report = JSON.parse(content);
                  } catch (e) {
                      console.error(`Failed to parse JSON from ${file}: ${e.message}`);
                      continue;
                  }
                  
                  if (!report.diagnostics || report.diagnostics.length === 0) {
                      console.log(`No diagnostics found in ${file}.`);
                      continue;
                  }
                  for (const diag of report.diagnostics) {
                    // Ensure all necessary fields for a comment are present
                    if (diag.location && diag.location.path && diag.location.range && typeof diag.location.range.start.line === 'number') {
                      comments.push({
                        path: diag.location.path,
                        line: diag.location.range.start.line,
                        body: `**[${report.source.name}]**: ${diag.message}`
                      });
                    } else {
                        console.log(`Skipping diagnostic due to missing location info: ${JSON.stringify(diag)}`);
                    }
                  }
                }
              }
            } catch (error) {
              console.log("Could not process linter reports, likely none were generated or directory issues:", error.message);
            }

            const pr_author = context.payload.pull_request.user.login;
            let review_body = `Hi @${pr_author}, I've finished my review!\n\n`;
            let event = 'APPROVE';
            let is_perfect = false;

            const outcomes = {
              flake8: { conclusion: `${{ needs.lint-and-test.outputs.flake8_outcome }}`, isBlocker: false, title: `üé® Linting Issues (\`flake8\`)` },
              black: { conclusion: `${{ needs.lint-and-test.outputs.black_outcome }}`, isBlocker: false, title: `üé® Formatting & Style (\`black\`)` },
              isort: { conclusion: `${{ needs.lint-and-test.outputs.isort_outcome }}`, isBlocker: false, title: `üé® Import Order (\`isort\`)` },
              bandit: { conclusion: `${{ needs.lint-and-test.outputs.bandit_outcome }}`, isBlocker: true, title: `üö® Security Analysis (\`bandit\`)` },
              mypy: { conclusion: `${{ needs.lint-and-test.outputs.mypy_outcome }}`, isBlocker: true, title: `üö® Type Checking (\`mypy\`)` },
              app_test: { conclusion: `${{ needs.lint-and-test.outputs.app_test_outcome }}`, isBlocker: true, title: `üö® Application Test` },
              codeql: { conclusion: `${{ needs.codeql.outputs.analyze_outcome }}`, isBlocker: true, title: `üö® Advanced Security (\`CodeQL\`)` }
            };

            const hasFailure = Object.values(outcomes).some(o => o.conclusion === 'failure');

            if (hasFailure || comments.length > 0) { // Also consider comments for "failure" status if there are any, even if steps passed
                const fix_guides = {
                    flake8: `I have posted inline comments with the details. Please address them. You can also try running \`/format\` to fix some issues.`,
                    black: `I have posted inline comments with the details. Running \`/format\` will fix this.`,
                    isort: `I have posted inline comments with the details. Running \`/format\` will fix this.`,
                    bandit: `Please see the inline comments for details on the security issue found.`,
                    mypy: `Please see the inline comments for details on the type-checking errors.`,
                    app_test: `The app failed to run for 10 seconds. Please check the workflow logs in the "Lint & Test" job for the full error message.`,
                    codeql: `Go to the **'Security' tab** of this repository, find the new 'Code scanning alert' for this pull request, and follow the detailed remediation advice provided there.`
                };

                const blockers = Object.keys(outcomes).filter(key => outcomes[key].isBlocker && outcomes[key].conclusion === 'failure');
                const suggestions = Object.keys(outcomes).filter(key => !outcomes[key].isBlocker && outcomes[key].conclusion === 'failure');
                
                // If there are blocking failures or inline comments, request changes
                if (blockers.length > 0 || comments.length > 0) { event = 'REQUEST_CHANGES'; }

                if (blockers.length > 0) {
                  review_body += `I've found a few critical issues (üö®) that need your attention before this can be merged. Here's a breakdown:\n\n---\n\n`;
                  for (const key of blockers) { review_body += `* **${outcomes[key].title}**\n    * **To Fix:** ${fix_guides[key]}\n\n`; }
                }
                if (suggestions.length > 0) {
                  if (blockers.length === 0) {
                      review_body += `Everything looks good to merge, but I have a few minor suggestions (üé®) to improve the code. I've left them as inline comments.\n\nHere's a summary:\n\n---\n\n`;
                  } else {
                      review_body += `I also found some minor suggestions:\n\n`;
                  }
                  for (const key of suggestions) { review_body += `* **${outcomes[key].title}**\n    * **To Fix:** ${fix_guides[key]}\n\n`; }
                }
                
                // Only add this concluding sentence if there were actual issues or comments
                if (blockers.length > 0 || suggestions.length > 0 || comments.length > 0) {
                    if (event === 'REQUEST_CHANGES') {
                      review_body += `\nPlease address the blocking issues and inline comments. Let me know if you have questions!`;
                    } else {
                      review_body += `\nSince there are no blocking issues, I'm approving this PR. Please consider addressing the suggestions I've left as inline comments.`;
                    }
                } else {
                    review_body += `Everything looks great! All checks passed. Keep up the fantastic work! üëç`;
                    is_perfect = true;
                }
            } else {
                review_body += `Everything looks great! All checks passed. Keep up the fantastic work! üëç`;
                is_perfect = true;
            }

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: event,
              body: review_body,
              comments: comments
            });
            
            if (is_perfect) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'priestybot-review'
                });
              } catch (error) {
                console.log("Could not remove 'priestybot-review' label, it might not exist or already be removed.");
              }
            }