name: PriestyBot PR Review

on:
  pull_request:
    types: [ review_requested ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-review:
    if: github.event.action == 'review_requested' && github.event.requested_reviewer.login == 'PriestyBot'
    runs-on: ubuntu-latest
    steps:
      - name: ü§ñ PriestyBot, Reporting for Duty!
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body: "PriestyBot, reporting for duty! ü´° I'll start my review now and post a final summary once I'm done. Wish me luck! üöÄ" });

      - name: üöö Getting the code...
        uses: actions/checkout@v4

      - name: üêç Setting up Python...
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: ‚ö° Caching dependencies for speed...
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üõ†Ô∏è Installing tools and linters...
        run: python -m pip install --upgrade pip && pip install -r requirements.txt && pip install mypy flake8 black isort

      - name: üê∂ Summoning the reviewdog...
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
          
      - name: üé® Performing Hybrid Linting Review...
        id: linting
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          # Default all statuses to PASSED and flags to false
          PR_ISSUES_FOUND=false
          CODEBASE_ISSUES_FOUND=false
          echo "flake8_failed=false" >> $GITHUB_OUTPUT
          echo "black_failed=false" >> $GITHUB_OUTPUT
          echo "isort_failed=false" >> $GITHUB_OUTPUT
          echo "mypy_failed=false" >> $GITHUB_OUTPUT

          # This robust structure is guaranteed not to crash the step.
          echo "--- Running flake8 ---"
          if ! flake8_output=$(flake8 src 2>&1); then
            CODEBASE_ISSUES_FOUND=true
            echo "flake8_failed=true" >> $GITHUB_OUTPUT
            echo "$flake8_output" > flake8_report.txt
            # Check if reviewdog finds PR-specific issues to comment on
            if ! echo "$flake8_output" | reviewdog -efm="%f:%l:%c: %m" -name="flake8" -reporter=github-pr-review -level=error -fail-on-error=true; then
              PR_ISSUES_FOUND=true
            fi
          fi

          echo "--- Running black ---"
          if ! black_output=$(black --check --diff src 2>&1); then
            CODEBASE_ISSUES_FOUND=true
            echo "black_failed=true" >> $GITHUB_OUTPUT
            echo "$black_output" > black_report.txt
            if ! echo "$black_output" | reviewdog -f=diff -f.diff.strip=1 -name="black" -reporter=github-pr-review -level=error -fail-on-error=true; then
              PR_ISSUES_FOUND=true
            fi
          fi
          
          echo "--- Running isort ---"
          if ! isort_output=$(isort --check src 2>&1); then
              CODEBASE_ISSUES_FOUND=true
              echo "isort_failed=true" >> $GITHUB_OUTPUT
              echo "$isort_output" > isort_report.txt
          fi

          echo "--- Running mypy ---"
          if ! mypy_output=$(mypy src 2>&1); then
              CODEBASE_ISSUES_FOUND=true
              echo "mypy_failed=true" >> $GITHUB_OUTPUT
              echo "$mypy_output" > mypy_report.txt
          fi
          
          echo "pr_issues=$PR_ISSUES_FOUND" >> "$GITHUB_OUTPUT"
          echo "codebase_issues=$CODEBASE_ISSUES_FOUND" >> "$GITHUB_OUTPUT"
          echo "Linting complete. Statuses: PR Issues - $PR_ISSUES_FOUND, Codebase Issues - $CODEBASE_ISSUES_FOUND"
          
      - name: üñ•Ô∏è Preparing the testing environment...
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: üß™ Running the critical App Test...
        id: app_test
        run: |
          if xvfb-run timeout 10s python src/main.py; then echo "status=PASSED" >> "$GITHUB_OUTPUT";
          else
            exit_code=$?; if [ $exit_code -eq 124 ]; then echo "status=PASSED" >> "$GITHUB_OUTPUT";
            else echo "status=FAILED" >> "$GITHUB_OUTPUT"; fi
          fi

      - name: üìù Final, Intelligent Review and Team Huddle!
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const fs = require('fs');
            const pr_author = context.payload.pull_request.user.login;
            const app_status = "${{ steps.app_test.outputs.status || 'FAILED' }}";
            const pr_issues = "${{ steps.linting.outputs.pr_issues }}" === "true";
            const codebase_issues = "${{ steps.linting.outputs.codebase_issues }}" === "true";
            
            const flake8_failed = "${{ steps.linting.outputs.flake8_failed }}" === "true";
            const black_failed = "${{ steps.linting.outputs.black_failed }}" === "true";
            const isort_failed = "${{ steps.linting.outputs.isort_failed }}" === "true";
            const mypy_failed = "${{ steps.linting.outputs.mypy_failed }}" === "true";
            
            const app_check = app_status === 'PASSED' ? 'Passed ‚úÖ' : 'Failed ‚ùå';
            const linter_check = !codebase_issues ? 'Looks good! ‚ú®' : 'Found some areas for improvement üî¨';

            let review_event = 'APPROVE';
            let body = `### PriestyBot Review Summary\n\nHello @${pr_author}! I've just finished reviewing your Python code. Here's what I found:\n\n- **Application Test:** ${app_check}\n- **Linters:** ${linter_check}\n\n`;

            function getReport(name) {
              if (fs.existsSync(`${name}_report.txt`)) { return fs.readFileSync(`${name}_report.txt`, 'utf8'); }
              return 'No output captured (linter passed).';
            }

            if (app_status === 'FAILED') {
              review_event = 'REQUEST_CHANGES';
              body += "The application test failed, which is the most critical issue. Please address that first!\n\n";
            } else if (pr_issues) {
              review_event = 'REQUEST_CHANGES';
              body += "I've left some inline comments for issues found on the lines you changed in this PR. Please address these to get the PR approved.\n\n" +
                      "I also found some pre-existing issues in other parts of the codebase, which I've included in the reports below for awareness.\n\n---\n";
            } else if (codebase_issues) {
              review_event = 'COMMENT';
              body += "Your changes look great! üëç However, I did find some pre-existing issues in other parts of the codebase. You are **not** required to fix these, but I wanted to make you aware of them:\n\n";
            }

            if (codebase_issues) {
              if (flake8_failed) { body += `<details><summary><strong>flake8 Report</strong></summary>\n\n\`\`\`\n${getReport('flake8')}\n\`\`\`\n\n</details>\n`; }
              if (black_failed) { body += `<details><summary><strong>Black Report</strong></summary>\n\n\`\`\`diff\n${getReport('black')}\n\`\`\`\n\n</details>\n`; }
              if (isort_failed) { body += `<details><summary><strong>isort Report</strong></summary>\n\n\`\`\`\n${getReport('isort')}\n\`\`\`\n\n</details>\n`; }
              if (mypy_failed) { body += `<details><summary><strong>mypy Report</strong></summary>\n\n\`\`\`\n${getReport('mypy')}\n\`\`\`\n\n</details>\n`; }
            }
            
            if (review_event !== 'APPROVE') {
              body += `\nüí° **Tip:** For quick fixes on formatting and import sorting, you can comment \`/format\` on this PR.\n\nThese linter suggestions are advisory. If you believe they are incorrect or wish to proceed anyway, you can use the \`/approve\` command.`;
            } else {
              body += "Everything looks fantastic! Great job. I'm approving this PR. Let's get it merged! üéâ";
            }
            
            await github.rest.pulls.createReview({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, body: body, event: review_event });