name: PriestyBot PR Reviewer

on:
  pull_request:
¬† ¬† types: [review_requested, synchronize]

# These permissions are required for the bot to post check annotations and submit a review.
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  review:
    name: PriestyBot Review
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the pull request code
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment
      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # You can change this to your project's Python version

      # Step 3: Install project dependencies and the tools for the bot
      - name: üõ†Ô∏è Install Dependencies & Tools
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies from requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the linters and reviewdog for the bot
          pip install flake8 black bandit mypy
          # Install reviewdog, which is used to post inline comments
          wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b /usr/local/bin

      # Step 4: Run the Tkinter app test to determine the core outcome (pass/fail)
      - name: üß™ Run Tkinter App Test
        id: app_test
        continue-on-error: true # This ensures the workflow continues to the review step even if the test fails
        run: |
          # We need to install a virtual framebuffer to run a GUI app in a headless environment
          sudo apt-get update && sudo apt-get install -y xvfb
          
          # This is the test script you provided
          if xvfb-run timeout 10s python -m src.main; then
            echo "‚úÖ App test PASSED: The app exited cleanly before the 10s timeout."
            echo "outcome=success" >> $GITHUB_OUTPUT
            exit 0
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "‚úÖ App test PASSED: The app ran for the full 10s and was terminated as expected."
              echo "outcome=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "‚ùå App test FAILED: The app crashed with exit code $exit_code."
              echo "outcome=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      # Step 5: Run linters. Reviewdog will post findings as "Check Annotations".
      - name: üßê Run Linters & Post Annotations
        id: linters
        continue-on-error: true # Linter issues are advisory, so they should not fail the workflow
        env:
          # This token is used by reviewdog to post annotations to the PR
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          # Initialize status variables
          flake8_found_issues=false
          black_found_issues=false
          bandit_found_issues=false
          mypy_found_issues=false

          # --- Run Flake8 ---
          flake8 . | tee flake8_output.txt
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            flake8_found_issues=true
            cat flake8_output.txt | reviewdog -f="flake8" -name="Flake8 Linter" -reporter="github-pr-check" -level="warning"
          fi

          # --- Run Black ---
          black --check --diff . > black_diff.txt 2>&1
          if [ $? -ne 0 ]; then
            black_found_issues=true
          fi

          # --- Run Bandit ---
          bandit -r . -f screen | tee bandit_output.txt
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            bandit_found_issues=true
            cat bandit_output.txt | reviewdog -name="Bandit Security" -reporter="github-pr-check" -level="warning"
          fi

          # --- Run Mypy ---
          mypy . --ignore-missing-imports | tee mypy_output.txt
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            mypy_found_issues=true
            cat mypy_output.txt | reviewdog -f="mypy" -name="Mypy Type Checker" -reporter="github-pr-check" -level="warning"
          fi

          # Set outputs for the final review step
          if $flake8_found_issues || $black_found_issues || $bandit_found_issues || $mypy_found_issues; then
            echo "status=issues_found" >> $GITHUB_OUTPUT
          else
            echo "status=clean" >> $GITHUB_OUTPUT
          fi
          
          echo "black_issues=$black_found_issues" >> $GITHUB_OUTPUT
          if $black_found_issues; then
            echo 'black_diff<<EOF' >> $GITHUB_OUTPUT
            cat black_diff.txt >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          fi

      # Step 6: Prepare the summary message and submit the final PR review
      - name: üìù Prepare and Submit Review
        env:
          # Use the GitHub CLI, authenticated with your bot's token
          GH_TOKEN: ${{ secrets.APPROVER_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          # Pass step outputs as environment variables for the script
          APP_TEST_OUTCOME: ${{ steps.app_test.outputs.outcome }}
          LINTER_STATUS: ${{ steps.linters.outputs.status }}
          BLACK_ISSUES: ${{ steps.linters.outputs.black_issues }}
          BLACK_DIFF: ${{ steps.linters.outputs.black_diff }}
        run: |
          # --- Build the Review Body ---
          # Set the final decision (event) and app test summary
          if [ "$APP_TEST_OUTCOME" == "success" ]; then
            EVENT="APPROVE"
            APP_TEST_RESULT="‚úÖ **App Test: Passed!** Great job, this is ready to merge."
          else
            EVENT="REQUEST_CHANGES"
            APP_TEST_RESULT="‚ùå **App Test: Failed.** The application didn't run correctly. This is a required check and must be fixed."
          fi

          # Build the linter and formatting summary
          if [ "$LINTER_STATUS" == "clean" ]; then
            LINTER_SUMMARY="‚ú® **Linters & Formatting:** All checks passed. Your code is sparkling!"
          else
            LINTER_SUMMARY="### üßº Linters & Formatting (Advisory)\nI found a few things that could be improved. **These are only suggestions to improve code quality and are not required to pass.**\n\nI've posted all my findings as annotations directly on the changed files. If you'd like me to automatically fix the formatting issues, just comment \`/format\` on this PR."
            if [ "$BLACK_ISSUES" == "true" ]; then
              # Append the black diff to the summary for easy viewing
              LINTER_SUMMARY="${LINTER_SUMMARY}\n\n**Black Formatter requires changes:**\n\`\`\`diff\n${BLACK_DIFF}\n\`\`\`"
            fi
          fi

          # Construct the final review body using all the pieces
          BODY=$(cat <<EOF
          Hello! I'm PriestyBot, your friendly automated reviewer. Here's my take on your latest changes:

          ${APP_TEST_RESULT}

          ---

          ${LINTER_SUMMARY}

          ---
          *This review was generated automatically. If you have any questions or if I made a mistake, please let my owner know!*
          EOF
          )

          # --- Submit the Final Review ---
          # The GitHub CLI (gh) uses the EVENT and BODY variables to submit the single, consolidated review.
          gh pr review $PR_URL --${EVENT,,} --body "$BODY"

