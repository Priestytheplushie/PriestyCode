# This workflow defines PriestyBot, a GitHub Action that automatically reviews Python pull requests.
# It posts inline comments for linter issues and a final summary review (Approve/Request Changes).

name: PriestyBot PR Reviewer

on:
  pull_request:
    types: [review_requested] # Trigger ONLY on review requests

permissions:
  contents: write      # For checking out code
  pull-requests: write # Required for creating reviews and comments
  checks: write        # Required for reviewdog to post inline annotations (check runs)

jobs:
  review:
    name: PriestyBot Review
    runs-on: ubuntu-latest
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1

      - name: 🤖 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate diffing by linters/reviewdog

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 📦 Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install bandit mypy flake8 black isort

      - name: 🐶 Install Reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: 📊 Configure Git
        run: |
          git config user.name "PriestyBot"
          git config user.email "priestybot@users.noreply.github.com"

      - name: 👋 Say Hello and Start Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: "👋 Hello there! PriestyBot here, ready to review your pull request. I'm just getting started by checking for any previous review instructions or approvals. Please bear with me while I go through your amazing code! 😊"
            });

      - name: 🏃‍♂️ Run Linters and Post Inline Comments with Reviewdog
        id: linters_run
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.APPROVER_TOKEN }}
        run: |
          # Initialize flags for each linter's failure status
          BANDIT_FAILED=false
          MYPY_FAILED=false
          FLAKE8_FAILED=false
          BLACK_FAILED=false
          ISORT_FAILED=false

          set -o pipefail # Ensure pipe failures are caught

          echo "Running Bandit (Security Linter)..."
          # Using -filter-mode=nofilter to show ALL issues found, not just those on changed lines.
          if ! bandit -r . -f json | tee bandit_raw_output.txt | reviewdog -f=rdjson -name="Bandit (Security)" -reporter=github-pr-check -level=warning -filter-mode=nofilter; then
            BANDIT_FAILED=true
          fi

          echo "Running MyPy (Type Checker)..."
          if ! mypy . --ignore-missing-imports | reviewdog -f=mypy -name="MyPy (Types)" -reporter=github-pr-check -level=warning -filter-mode=nofilter; then
            MYPY_FAILED=true
          fi

          echo "Running Flake8..."
          if ! flake8 . | reviewdog -f=flake8 -name="Flake8" -reporter=github-pr-check -level=warning -filter-mode=nofilter; then
            FLAKE8_FAILED=true
          fi

          echo "Running Black (Code Formatter Check)..."
          if ! black --check --diff . 2> black_results.txt | reviewdog -f=diff -f.diff.strip=1 -name="Black (Formatter)" -reporter=github-pr-check -filter-mode=nofilter; then
            BLACK_FAILED=true
          else
            > black_results.txt # Clear file on success
          fi

          echo "Running isort (Import Sorter Check)..."
          if ! isort --check-only --diff . 2> isort_results.txt | reviewdog -f=diff -f.diff.strip=1 -name="isort (Import Sorter)" -reporter=github-pr-check -filter-mode=nofilter; then
            ISORT_FAILED=true
          else
            > isort_results.txt # Clear file on success
          fi

          # Set output variables for each linter's status
          echo "bandit_failed=$BANDIT_FAILED" >> $GITHUB_OUTPUT
          echo "mypy_failed=$MYPY_FAILED" >> $GITHUB_OUTPUT
          echo "flake8_failed=$FLAKE8_FAILED" >> $GITHUB_OUTPUT
          echo "black_failed=$BLACK_FAILED" >> $GITHUB_OUTPUT
          echo "isort_failed=$ISORT_FAILED" >> $GITHUB_OUTPUT

          if $BANDIT_FAILED || $MYPY_FAILED || $FLAKE8_FAILED || $BLACK_FAILED || $ISORT_FAILED; then
            echo "linter_failed=true" >> $GITHUB_OUTPUT
          else
            echo "linter_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: 💬 Post Linter Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const bandit_failed = "${{ steps.linters_run.outputs.bandit_failed }}" === "true";
            const mypy_failed = "${{ steps.linters_run.outputs.mypy_failed }}" === "true";
            const flake8_failed = "${{ steps.linters_run.outputs.flake8_failed }}" === "true";
            const black_failed = "${{ steps.linters_run.outputs.black_failed }}" === "true";
            const isort_failed = "${{ steps.linters_run.outputs.isort_failed }}" === "true";
            const linter_failed_overall = "${{ steps.linters_run.outputs.linter_failed }}" === "true";

            let message = "Alright, I've finished my initial linter checks! Here's a quick peek at how each one performed:\n\n";
            message += `* **Bandit (Security):** ${bandit_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            message += `* **MyPy (Types):** ${mypy_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            message += `* **Flake8:** ${flake8_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            message += `* **Black (Code Formatter):** ${black_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            message += `* **isort (Import Sorter):** ${isort_failed ? 'Failed ❌' : 'Passed ✅'}\n\n`;

            if (linter_failed_overall) {
              message += "I've posted some inline comments where I found specific issues. Remember, these are suggestions to help keep your code super clean! Next up, I'll run the application tests. Stay tuned! 🚀";
            } else {
              message += "Great news! All linters passed with flying colors! Your code is looking good so far. Now, let's see how the application tests perform! 🚀";
            }

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: message
            });

      - name: 🧪 Run Tkinter App Test
        id: app_test
        continue-on-error: true
        run: |
          echo "Installing xvfb for Tkinter app test..."
          sudo apt-get update && sudo apt-get install -y xvfb
          echo "Running Tkinter App Test..."
          if xvfb-run timeout 10s python -m src.main; then
            echo "App test PASSED: Exited cleanly before timeout."
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "App test PASSED: Ran for 10s and was terminated as expected."
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "App test FAILED: App crashed with exit code $exit_code."
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: 💬 Post App Test Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const app_test_status = "${{ steps.app_test.outputs.status }}";
            let message;

            if (app_test_status === 'success') {
              message = "Fantastic news! The application tests passed successfully! 🎉 Your app seems to be running just as expected. I'm now compiling my final review based on all the checks.";
            } else {
              message = "Oh no! It looks like the application tests encountered an issue. 💔 This is a critical step, so I'll need to request changes. I'm preparing my full review now with all the details.";
            }

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: message
            });

      - name: 📝 Generate and Post Final Summary Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.APPROVER_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const app_test_status = "${{ steps.app_test.outputs.status }}";
            const linter_failed_overall = "${{ steps.linters_run.outputs.linter_failed }}" === "true";
            const bandit_failed = "${{ steps.linters_run.outputs.bandit_failed }}" === "true";
            const mypy_failed = "${{ steps.linters_run.outputs.mypy_failed }}" === "true";
            const flake8_failed = "${{ steps.linters_run.outputs.flake8_failed }}" === "true";
            const black_failed = "${{ steps.linters_run.outputs.black_failed }}" === "true";
            const isort_failed = "${{ steps.linters_run.outputs.isort_failed }}" === "true";
            const fs = require('fs');

            let bandit_output = fs.readFileSync('bandit_raw_output.txt', 'utf8').trim().replace(/`/g, '\\`');

            // Construct the main review body
            let body = `### PriestyBot Final Review Summary\n\nHello again! Here's the complete summary of my review on your Python code:\n\n`;
            body += `* **Application Test:** ${app_test_status === 'success' ? 'Passed ✅' : 'Failed ❌'}\n`;
            body += `\n**Detailed Linter Results:**\n`;
            body += `* **Bandit (Security):** ${bandit_failed ? 'Failed ❌ (Critical!)' : 'Passed ✅'}\n`;
            body += `* **MyPy (Types):** ${mypy_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            body += `* **Flake8:** ${flake8_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            body += `* **Black (Code Formatter):** ${black_failed ? 'Failed ❌' : 'Passed ✅'}\n`;
            body += `* **isort (Import Sorter):** ${isort_failed ? 'Failed ❌' : 'Passed ✅'}\n`;

            if (linter_failed_overall) {
              body += `\n\nI found some issues during the review. **Please check the inline comments I've left directly on the code in the 'Files changed' tab for specific details.**\n`;

              if (bandit_failed) {
                body += `\nFor reference, here is the full security report from Bandit:\n\`\`\`json\n${bandit_output}\n\`\`\`\n`;
              }
              
              if (black_failed || isort_failed) {
                  body += `\n💡 **Pro-Tip:** For quick fixes on formatting and import sorting, you can comment \`/format\` on this PR. It's super handy!`;
              }
              body += `\n\nRemember, these linter suggestions are advisory. If you've reviewed them and believe they are not applicable, or if you wish to proceed anyway, you can always use the \`/approve\` command. Your decision is final!`;
            } else {
                body += `\n\nAll linters passed! 🎉 Your code looks sparkling clean and follows our style guidelines beautifully!`;
            }

            let event_type;
            let final_message;

            // Determine the review event type and final message based on results
            if (app_test_status === 'failure') {
              event_type = 'REQUEST_CHANGES';
              final_message = "\n\n**Decision: Requesting Changes**\n\nUnfortunately, I have to request changes because the application tests failed. This is a critical issue that needs to be addressed. Please fix the issues and push your changes so I can review again. I'm here to help if you get stuck! 😊";
            } else if (linter_failed_overall) {
              event_type = 'REQUEST_CHANGES';
              final_message = "\n\n**Decision: Requesting Changes**\n\nBased on the linter findings, I'm requesting changes. Please review the details above and any inline comments. Remember, linters are advisory, and you can use `/approve` to bypass them if needed. Let's get this code polished! ✨";
            } else {
              event_type = 'APPROVE';
              final_message = "\n\n**Decision: Approved!**\n\nEverything looks absolutely fantastic! Both the application tests and all linters passed with flying colors. Great job! 👍 Your code is ready to merge! Keep up the amazing work! 🥳";
            }

            // Post the final review
            github.rest.pulls.createReview({
              owner,
              repo,
              pull_number: pr_number,
              body: body + final_message, // Combine summary and final message
              event: event_type,
            });