name: Sync Main to Develop (Rebase)

on:
  push:
    branches:
      - main # This workflow triggers whenever new commits are pushed to the 'main' branch.

permissions:
  contents: write # This permission is necessary for the 'actions/checkout' action to clone the repository and for Git operations like pushing.

jobs:
  sync:
    runs-on: ubuntu-latest # The job will run on a fresh Ubuntu virtual machine.
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4 # This action checks out your repository code.
        with:
          ref: develop # It specifically checks out the 'develop' branch.
          # The 'APPROVER_TOKEN' (from your repository secrets) is used here for authentication.
          # This token must have 'repo' scope or at least 'contents: write' permissions.
          token: ${{ secrets.APPROVER_TOKEN }} 

      - name: Configure Git for Automation
        run: |
          # Configure the Git user details for the commits made by this automation.
          # This helps in identifying commits generated by this specific workflow.
          git config user.name "PriestyBot-Sync" 
          git config user.email "priestybot-sync@users.noreply.github.com"
          
          # Set up the remote URL to include the APPROVER_TOKEN for authentication.
          # This allows the subsequent 'git push' command to authenticate correctly.
          git remote set-url origin https://x-access-token:${{ secrets.APPROVER_TOKEN }}@github.com/${{ github.repository }}

      - name: Rebase develop onto main
        run: |
          # Fetch the latest state of the 'main' branch from the remote.
          # This ensures 'origin/main' is up-to-date for the rebase operation.
          git fetch origin main

          # Attempt to rebase the local 'develop' branch onto the latest 'main' branch.
          # This operation replays 'develop's unique commits on top of 'main's history,
          # creating a linear history and avoiding merge commits.
          if git rebase origin/main; then
            echo "Rebase successful, pushing changes."
            # Push the rebased 'develop' branch to the remote.
            # '--force-with-lease' is used because rebase rewrites history, requiring a force push.
            # It's safer than '--force' as it only pushes if the remote branch hasn't changed
            # since the last fetch, preventing accidental overwrites of concurrent updates.
            git push origin develop --force-with-lease
          else
            echo "::error::Automatic rebase failed due to conflicts. Manual intervention required."
            echo "::error::To resolve: Checkout 'develop', run 'git pull', then 'git rebase main', fix conflicts, and 'git push --force-with-lease'."
            exit 1 # The workflow step will fail if conflicts occur, signaling a need for human review.
          fi
